#!/bin/bash
#
# Copyright (C) 2020 Brady Miller <brady.g.miller@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Bash library for openemr ci
#

set -xeuo pipefail

coverage_args=(
    --coverage-filter apis
    --coverage-filter gacl
    --coverage-filter interface
    --coverage-filter library
    --coverage-filter modules
    --coverage-filter oauth2
    --coverage-filter portal
    --coverage-filter sites
    --coverage-filter src
    --coverage-filter tests
    --coverage-text
    --path-coverage
)

composer_github_auth() {
    githubToken=$(base64 --decode <<< MjE2OTcwOGE2MmM5ZWRiMzA3NGFmNGVjMmZkOGE0MWY2YzVkMDJhZgo=)
    githubTokenRateLimitRequest=$(curl -H "Authorization: token $githubToken" https://api.github.com/rate_limit)
    githubTokenRateLimit=$(jq '.rate.remaining' <<< "$githubTokenRateLimitRequest")
    echo "Number of github api requests remaining is $githubTokenRateLimit"
    if (( githubTokenRateLimit > 500 )); then
        echo 'Trying to use composer github api token'
        if composer config --global --auth github-oauth.github.com "$githubToken"; then
            echo "github composer token worked"
        else
            echo "github composer token did not work"
        fi
    else
        echo "Not using composer github api token"
    fi
}

##
# Technically dc is a calculator command in linux,
# but it's rarely used in the same context as docker compose.
dc() {
    docker compose --project-directory "ci/${DOCKER_DIR}" "$@"
}

_exec() {
    if [[ ${ENABLE_COVERAGE:-false} = true ]]; then
        dc exec --env XDEBUG_MODE=coverage --workdir "${OPENEMR_DIR}" openemr "$@"
    else
        dc exec --workdir "${OPENEMR_DIR}" openemr "$@"
    fi
}

dockers_env_start() {
    dc up --detach
}

actions_chmod() {
    # TODO, figure out how not to require the below line (maybe chown or something like that)
    if [[ -z ${GITHUB_RUN_ID:-} ]]; then
        echo 'skipping chmod because this is not running in github actions'
        return
    fi
    sudo chmod "$@"
}

main_build() {
    actions_chmod -R 0777 .
    local composer_home
    composer_home=$(composer --no-interaction config --global --absolute home) 2> /dev/null
    composer install
    npm ci
    npm run build
    composer global require phing/phing
    "${composer_home}/vendor/bin/phing" vendor-clean
    "${composer_home}/vendor/bin/phing" assets-clean
    composer global remove phing/phing
    composer dump-autoload -o
    rm -fr node_modules
}

ccda_build() (
    cd ccdaservice
    npm ci
)

configure_coverage() {
    _exec sh -c '
      XDEBUG_IDE_KEY=unimportant XDEBUG_ON=yes ../xdebug.sh
      mkdir -p ./coverage
      curl -sSLO https://phar.phpunit.de/phpcov-11.0.0.phar
    '
}

phpcov() {
    _exec php -d memory_limit=8G phpcov-11.0.0.phar "$@"
}

install_configure() {
    actions_chmod 0666 sites/default/sqlconf.php
    actions_chmod -R 0777 sites/default/documents
    sed -e 's@^exit;@ @' < contrib/util/installScripts/InstallerAuto.php > contrib/util/installScripts/InstallerAutoTemp.php
    _exec php -f ./contrib/util/installScripts/InstallerAutoTemp.php rootpass=root server=mysql loginhost=%
    _exec rm -f ./contrib/util/installScripts/InstallerAutoTemp.php
    _exec mysql -u openemr --password="openemr" --ssl=false -h mysql -e 'INSERT INTO product_registration (opt_out) VALUES (1)' openemr
    _exec mysql -u openemr --password="openemr" --ssl=false -h mysql -e 'UPDATE globals SET gl_value = 1 WHERE gl_name = "rest_api"' openemr
    _exec mysql -u openemr --password="openemr" --ssl=false -h mysql -e 'UPDATE globals SET gl_value = 1 WHERE gl_name = "rest_fhir_api"' openemr
    _exec mysql -u openemr --password="openemr" --ssl=false -h mysql -e 'UPDATE globals SET gl_value = 1 WHERE gl_name = "rest_portal_api"' openemr
    _exec mysql -u openemr --password="openemr" --ssl=false -h mysql -e 'UPDATE globals SET gl_value = 3 WHERE gl_name = "oauth_password_grant"' openemr
    _exec mysql -u openemr --password="openemr" --ssl=false -h mysql -e 'UPDATE globals SET gl_value = 1 WHERE gl_name = "rest_system_scopes_api"' openemr
}

build_test_e2e() {
    _exec sh -c "${CHROMIUM_INSTALL};
                 export PANTHER_NO_SANDBOX=1;
                 export PANTHER_CHROME_ARGUMENTS=--disable-dev-shm-usage;
                 php -d memory_limit=8G ./vendor/bin/phpunit --testsuite e2e \
                                                             --testdox"
}

phpunit() {
    _exec php -d memory_limit=8G ./vendor/bin/phpunit --testdox "$@"
}

##
# Run the tests, enabling coverage if set.
# Coverage is not handled for api or e2e tests.
build_test() {
    local testsuite="$1"
    local -a args=( --testsuite "$testsuite" )
    shift
    case "$testsuite" in
        api) phpunit "${args[@]}" "$@"
             return
             ;;
        e2e) build_test_e2e "$@"
             return
             ;;
    esac
    if [[ ${ENABLE_COVERAGE:-false} = true ]]; then
        args+=(
            --coverage-php "./coverage/coverage.${testsuite}.cov"
            "${coverage_args[@]}"
        )
    fi
    phpunit "${args[@]}" "$@"
}

merge_coverage() {
    phpcov merge coverage --clover coverage.clover.xml \
                          --html htmlcov coverage \
                          --text /dev/stdout
}
