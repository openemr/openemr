name: Setup EC2 Environment (Run Once)

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}

jobs:
  setup:
    name: Install Required Software on EC2
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Software on EC2
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "#!/bin/bash",
              "set -e",
              "echo \"=== Updating system packages ===\"",
              "sudo apt update",
              "echo",
              "echo \"=== Installing PHP and extensions ===\"",
              "sudo apt install -y php php-cli php-mbstring php-curl php-xml php-zip php-mysql php-gd php-intl php-ldap php-soap unzip curl git",
              "echo",
              "echo \"=== Installing Composer ===\"",
              "curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer",
              "composer --version",
              "echo",
              "echo \"=== Installing Node.js 22 ===\"",
              "curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -",
              "sudo apt install -y nodejs",
              "node --version",
              "npm --version",
              "echo",
              "echo \"=== Installing Apache2 (if not installed) ===\"",
              "sudo apt install -y apache2",
              "sudo systemctl enable apache2",
              "echo",
              "echo \"=== Setup completed successfully! ===\"",
              "echo \"Installed versions:\",
              "php -v | head -1",
              "composer --version",
              "node --version",
              "npm --version"
            ]' \
            --region "${{ env.AWS_REGION }}" \
            --timeout-seconds 300 \
            --query 'Command.CommandId' \
            --output text)
          
          echo "Command ID: $COMMAND_ID"
          echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_ENV
          
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ env.EC2_INSTANCE_ID }}" \
            --region "${{ env.AWS_REGION }}" || true

      - name: Show Setup Output
        if: always()
        run: |
          echo "=== Setup Output ==="
          aws ssm get-command-invocation \
            --command-id "${{ env.COMMAND_ID }}" \
            --instance-id "${{ env.EC2_INSTANCE_ID }}" \
            --region "${{ env.AWS_REGION }}" \
            --query 'StandardOutputContent' \
            --output text

      - name: Show Setup Errors
        if: always()
        run: |
          echo "=== Setup Errors (if any) ==="
          aws ssm get-command-invocation \
            --command-id "${{ env.COMMAND_ID }}" \
            --instance-id "${{ env.EC2_INSTANCE_ID }}" \
            --region "${{ env.AWS_REGION }}" \
            --query 'StandardErrorContent' \
            --output text || echo "No errors"
