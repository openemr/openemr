name: Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read

jobs:
  collect:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Collect Docker Dirs
      id: docker-dirs
      ##
      # Parse out the test parameters from the ci subdirectories that contain
      # docker-compose.yml files. We'll use that output as a test matrix
      # in github actions.
      run: |
        shopt -s nullglob
        dirs=( ci/*/docker-compose.yml )
        if (( "${#dirs[@]}" == 0 )); then
          echo 'No docker-compose.yml files found in ci subdirectories.' >&2
          exit 1
        fi
        dirs=( "${dirs[@]%/docker-compose.yml}" )
        dirs=( "${dirs[@]#ci/}" )
        # Everything inside this for loop that goes to stdout ends up
        # in the github output, so it must be valid json.
        for docker_dir in "${dirs[@]}"; do
            IFS=: read -r database db < <(yq '.services.mysql.image' "ci/${docker_dir}/docker-compose.yml")
            IFS=_ read -r webserver php _ <<< "${docker_dir}"

            # collect docker-compose.yml templates that will be used in the docker compose up merge
            webserver_template=$(yq '.x-includes.webserver-template' "ci/${docker_dir}/docker-compose.yml")
            database_template=$(yq '.x-includes.database-template' "ci/${docker_dir}/docker-compose.yml")

            # If docker_dir ends with "_no-e2e", we want to skip the e2e tests for this configuration.
            [[ $docker_dir = *_no-e2e ]] && e2e_enabled=false || e2e_enabled=true

            printf -v php '%d.%d' "${php::1}" "${php:1}"
            case "$webserver" in
                apache)
                    openemr_dir=/var/www/localhost/htdocs/openemr
                    chromium_install='apk update; apk add --no-cache chromium chromium-chromedriver; export PANTHER_CHROME_DRIVER_BINARY=/usr/lib/chromium/chromedriver'
                    ;;
                nginx)
                    openemr_dir=/usr/share/nginx/html/openemr
                    chromium_install='apt-get update; apt-get install -y chromium-driver; export PANTHER_CHROME_DRIVER_BINARY=/usr/bin/chromedriver'
                    ;;
                *)
                    echo "Unknown webserver: $webserver" >&2;
                    exit 1
                    ;;
            esac
            printf '{
                "chromium_install": "%s",
                "docker_dir": "%s",
                "database": "%s",
                "db": "%s",
                "e2e_enabled": "%s",
                "openemr_dir": "%s",
                "php": "%s",
                "webserver": "%s",
                "webserver_template": "%s",
                "database_template": "%s"
            }\n' "$chromium_install" "$docker_dir" "$database" "$db" "$e2e_enabled" "$openemr_dir" "$php" "$webserver" "$webserver_template" "$database_template"
        done | {
            printf 'configurations='
            jq -cs .
        } >> "$GITHUB_OUTPUT"
    outputs:
      configurations: ${{ steps.docker-dirs.outputs.configurations }}
  build:
    name: PHP ${{ matrix.configurations.php }} - ${{ matrix.configurations.webserver }} - ${{ matrix.configurations.database }} ${{ matrix.configurations.db }}
    runs-on: ubuntu-22.04
    needs: collect
    strategy:
      fail-fast: false
      matrix:
        configurations: ${{ fromJson(needs.collect.outputs.configurations) }}
    env:
      CHROMIUM_INSTALL: ${{ matrix.configurations.chromium_install }}
      DOCKER_DIR: ${{ matrix.configurations.docker_dir }}
      ENABLE_COVERAGE: ${{ matrix.configurations.docker_dir == 'apache_84_114' && 'true' || 'false' }}
      OPENEMR_DIR: ${{ matrix.configurations.openemr_dir }}
      COMPOSE_FILE: "ci/${{ matrix.configurations.webserver_template }}:ci/${{ matrix.configurations.database_template }}:ci/${{ matrix.configurations.docker_dir }}/docker-compose.yml"
    steps:
    - uses: actions/checkout@v4
    - name: Install PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.configurations.php }}
    - name: Report PHP Version
      run: php -v
    - name: Install npm package
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Main build
      run: |
        . ci/ciLibrary.source
        composer_github_auth
        main_build
    - name: CCDA build
      run: |
        . ci/ciLibrary.source
        ccda_build
    - name: Docker Compose Config Output
      run: |
        . ci/ciLibrary.source
        dc config
    - name: Dockers environment start
      run: |
        . ci/ciLibrary.source
        dockers_env_start
    - name: Wait for MySQL to initialize
      if: ${{ matrix.configurations.database == 'mysql' }}
      run: |
        echo "Waiting 60 seconds for MySQL to initialize..."
        sleep 60
    - name: Install and configure
      run: |
        . ci/ciLibrary.source
        install_configure
    - name: Prepare for coverage reporting
      if: ${{ env.ENABLE_COVERAGE == 'true' }}
      run: |
        . ci/ciLibrary.source
        configure_coverage
    - name: Unit testing
      if: ${{ success() || failure() }}
      run: |
        . ci/ciLibrary.source
        build_test unit
    ##
    # To skip E2E tests for specific docker directories,
    # rename the docker directory to end with "_no-e2e".
    - name: E2e testing
      if: ${{ (success() || failure()) && matrix.configurations.e2e_enabled == 'true' }}
      run: |
        . ci/ciLibrary.source
        build_test e2e
    - name: Api testing
      if: ${{ success() || failure() }}
      run: |
        . ci/ciLibrary.source
        build_test api
    - name: Fixtures testing
      if: ${{ success() || failure() }}
      run: |
        . ci/ciLibrary.source
        build_test fixtures
    - name: Services testing
      if: ${{ success() || failure() }}
      run: |
        . ci/ciLibrary.source
        build_test services
    - name: Validators testing
      if: ${{ success() || failure() }}
      run: |
        . ci/ciLibrary.source
        build_test validators
    - name: Controllers testing
      if: ${{ success() || failure() }}
      run: |
        . ci/ciLibrary.source
        build_test controllers
    - name: Common testing
      if: ${{ success() || failure() }}
      run: |
        . ci/ciLibrary.source
        build_test common
    - name: Combine coverage
      if: ${{ env.ENABLE_COVERAGE == 'true' && (success() || failure()) }}
      run: |
        . ci/ciLibrary.source
        merge_coverage
    - name: Check if coverage files exist
      if: ${{ env.ENABLE_COVERAGE == 'true' && (success() || failure()) }}
      id: check-files
      run: |
        echo "clover_exists=$(test -f coverage.clover.xml && echo true || echo false)" >> $GITHUB_OUTPUT
        echo "htmlcov_exists=$(test -d ./htmlcov && echo true || echo false)" >> $GITHUB_OUTPUT
    - uses: actions/upload-artifact@v4
      if: ${{ env.ENABLE_COVERAGE == 'true' && steps.check-files.outputs.clover_exists == 'true' && (success() || failure()) }}
      with:
        name: coverage.clover.xml
        path: coverage.clover.xml
    - uses: actions/upload-artifact@v4
      if: ${{ env.ENABLE_COVERAGE == 'true' && steps.check-files.outputs.htmlcov_exists == 'true' && (success() || failure()) }}
      with:
        name: htmlcov
        path: ./htmlcov/
    # - name: Upload coverage reports to Codecov
    #   if: ${{ env.ENABLE_COVERAGE == 'true' && steps.check-files.outputs.clover_exists == 'true' && (success() || failure()) }}
    #   uses: codecov/codecov-action@v5
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }}
    #     files: coverage.clover.xml
