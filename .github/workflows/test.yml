##
# Reusable workflow for running OpenEMR tests
# Accepts a docker directory name and parses all configuration from it

name: Test

run-name: ${{ inputs.display_name || inputs.docker_dir }}

on:
  workflow_call:
    inputs:
      docker_dir:
        required: true
        type: string
        description: 'Docker directory name (e.g., apache_84_114)'
      display_name:
        required: false
        type: string
        description: 'Display name for the workflow run (defaults to docker_dir)'
        default: ''
      enable_coverage:
        required: false
        type: boolean
        description: 'Toggle coverage collection and reporting'
        default: false
      save_composer_cache:
        required: false
        type: boolean
        description: 'Save composer cache (only first job per PHP version should)'
        default: false
      save_node_cache:
        required: false
        type: boolean
        description: 'Save node cache (only first job per Node version should)'
        default: false
  workflow_dispatch:
    inputs:
      docker_dir:
        description: 'Docker directory name'
        required: true
        type: choice
        options:
          - apache_84_114
          - apache_84_57
          - apache_83_114
          - nginx_84_114
          - nginx_83_114
        default: 'apache_84_114'
      enable_coverage:
        description: 'Enable coverage collection and reporting'
        required: false
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  run:
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout Code
      uses: actions/checkout@v5

    - name: Parse Configuration
      id: parse
      run: |
        # Run the parsing script and save JSON output
        ci/parse_docker_dir.sh "${{ inputs.docker_dir }}" | tee parsed_config.json

        # Extract outputs and write to GITHUB_OUTPUT
        jq -r '.[0].output | to_entries[] | "\(.key)=\(.value)"' parsed_config.json >> "$GITHUB_OUTPUT"

        # Extract env vars and write to GITHUB_ENV
        jq -r '.[0].env | to_entries[] | "\(.key)=\(.value)"' parsed_config.json >> "$GITHUB_ENV"

        # Add ENABLE_COVERAGE to GITHUB_ENV
        echo "ENABLE_COVERAGE=${{ inputs.enable_coverage }}" >> "$GITHUB_ENV"

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ steps.parse.outputs.php }}

    - name: Report PHP Version
      run: php -v

    - name: Get composer cache directory
      id: composer-cache
      run: |
        {
          printf 'dir='
          composer config cache-files-dir
        } >> $GITHUB_OUTPUT

    - name: Composer Cache
      id: composer-cache-restore
      uses: actions/cache/restore@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ steps.parse.outputs.php }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-${{ steps.parse.outputs.php }}-
          ${{ runner.os }}-composer-

    - name: Install npm package
      uses: actions/setup-node@v6
      with:
        node-version: ${{ steps.parse.outputs.node_version }}

    - name: Get NPM Cache Directory
      id: npm-cache-dir
      run: |
        {
          printf 'dir='
          npm config get cache
        } >> "$GITHUB_OUTPUT"

    - name: Cache node modules
      # Use explicit restore and save actions to control
      # precisely when in the workflow the cache is
      # restored and saved.
      id: npm-cache-restore
      uses: actions/cache/restore@v4
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ steps.parse.outputs.node_version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ steps.parse.outputs.node_version }}-
          ${{ runner.os }}-node-

    - name: Main build
      run: |
        . ci/ciLibrary.source
        composer_github_auth
        main_build

    - name: CCDA build
      run: |
        . ci/ciLibrary.source
        ccda_build

    - name: Save node cache
      if: ${{ inputs.save_node_cache && steps.npm-cache-restore.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v4
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ steps.parse.outputs.node_version }}-${{ hashFiles('**/package-lock.json') }}

    - name: Save composer cache
      if: ${{ inputs.save_composer_cache && steps.composer-cache-restore.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ steps.parse.outputs.php }}-${{ hashFiles('**/composer.lock') }}

    - name: Docker Compose Config Output
      run: |
        . ci/ciLibrary.source
        dc config

    - name: Dockers environment start
      run: |
        . ci/ciLibrary.source
        dockers_env_start

    - name: Wait for MySQL to initialize
      if: ${{ steps.parse.outputs.database == 'mysql' }}
      run: |
        echo "Waiting 60 seconds for MySQL to initialize..."
        sleep 60

    - name: Install and configure
      run: |
        . ci/ciLibrary.source
        install_configure

    - name: PHP info
      run: |
        curl -fsSL phpinfo.html http://localhost/ci/phpinfo.php | tee phpinfo.html

    - name: Upload PHP info to GitHub
      uses: actions/upload-artifact@v4
      if: ${{ hashFiles('phpinfo.html') != '' }}
      with:
        name: phpinfo-${{ steps.parse.outputs.docker_dir }}.html
        path: phpinfo.html

    - name: Prepare for coverage reporting
      if: ${{ env.ENABLE_COVERAGE == 'true' }}
      run: |
        . ci/ciLibrary.source
        configure_coverage

    - name: Unit testing
      if: ${{ success() || failure() }}
      run: |
        . ci/ciLibrary.source
        build_test unit

    - name: Upload unit test results to Codecov
      if: ${{ !cancelled() && hashFiles('junit-unit.xml') != '' }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: junit-unit.xml
        flags: unit,php${{ steps.parse.outputs.php }},${{ steps.parse.outputs.webserver }},${{ steps.parse.outputs.database }}${{ steps.parse.outputs.db }}

    - name: Upload unit test coverage to Codecov
      if: ${{ env.ENABLE_COVERAGE == 'true' && !cancelled() && hashFiles('coverage.unit.clover.xml') != '' }}
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.unit.clover.xml
        flags: unit,php${{ steps.parse.outputs.php }},${{ steps.parse.outputs.webserver }},${{ steps.parse.outputs.database }}${{ steps.parse.outputs.db }}

    - name: Api testing
      if: ${{ success() || failure() }}
      env:
        ENABLE_COVERAGE: 'false'
      run: |
        . ci/ciLibrary.source
        build_test api

    - name: Upload api test results to Codecov
      if: ${{ !cancelled() && hashFiles('junit-api.xml') != '' }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: junit-api.xml
        flags: api,php${{ steps.parse.outputs.php }},${{ steps.parse.outputs.webserver }},${{ steps.parse.outputs.database }}${{ steps.parse.outputs.db }}

    - name: Upload api test coverage to Codecov
      if: ${{ env.ENABLE_COVERAGE == 'true' && !cancelled() && hashFiles('coverage.api.clover.xml') != '' }}
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.api.clover.xml
        flags: api,php${{ steps.parse.outputs.php }},${{ steps.parse.outputs.webserver }},${{ steps.parse.outputs.database }}${{ steps.parse.outputs.db }}

    - name: Fixtures testing
      if: ${{ success() || failure() }}
      run: |
        . ci/ciLibrary.source
        build_test fixtures

    - name: Upload fixtures test results to Codecov
      if: ${{ !cancelled() && hashFiles('junit-fixtures.xml') != '' }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: junit-fixtures.xml
        flags: fixtures,php${{ steps.parse.outputs.php }},${{ steps.parse.outputs.webserver }},${{ steps.parse.outputs.database }}${{ steps.parse.outputs.db }}

    - name: Upload fixtures test coverage to Codecov
      if: ${{ env.ENABLE_COVERAGE == 'true' && !cancelled() && hashFiles('coverage.fixtures.clover.xml') != '' }}
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.fixtures.clover.xml
        flags: fixtures,php${{ steps.parse.outputs.php }},${{ steps.parse.outputs.webserver }},${{ steps.parse.outputs.database }}${{ steps.parse.outputs.db }}

    - name: Services testing
      if: ${{ success() || failure() }}
      run: |
        . ci/ciLibrary.source
        build_test services

    - name: Upload services test results to Codecov
      if: ${{ !cancelled() && hashFiles('junit-services.xml') != '' }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: junit-services.xml
        flags: services,php${{ steps.parse.outputs.php }},${{ steps.parse.outputs.webserver }},${{ steps.parse.outputs.database }}${{ steps.parse.outputs.db }}

    - name: Upload services test coverage to Codecov
      if: ${{ env.ENABLE_COVERAGE == 'true' && !cancelled() && hashFiles('coverage.services.clover.xml') != '' }}
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.services.clover.xml
        flags: services,php${{ steps.parse.outputs.php }},${{ steps.parse.outputs.webserver }},${{ steps.parse.outputs.database }}${{ steps.parse.outputs.db }}

    - name: Validators testing
      if: ${{ success() || failure() }}
      run: |
        . ci/ciLibrary.source
        build_test validators

    - name: Upload validators test results to Codecov
      if: ${{ !cancelled() && hashFiles('junit-validators.xml') != '' }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: junit-validators.xml
        flags: validators,php${{ steps.parse.outputs.php }},${{ steps.parse.outputs.webserver }},${{ steps.parse.outputs.database }}${{ steps.parse.outputs.db }}

    - name: Upload validators test coverage to Codecov
      if: ${{ env.ENABLE_COVERAGE == 'true' && !cancelled() && hashFiles('coverage.validators.clover.xml') != '' }}
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.validators.clover.xml
        flags: validators,php${{ steps.parse.outputs.php }},${{ steps.parse.outputs.webserver }},${{ steps.parse.outputs.database }}${{ steps.parse.outputs.db }}

    - name: Controllers testing
      if: ${{ success() || failure() }}
      run: |
        . ci/ciLibrary.source
        build_test controllers

    - name: Upload controllers test results to Codecov
      if: ${{ !cancelled() && hashFiles('junit-controllers.xml') != '' }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: junit-controllers.xml
        flags: controllers,php${{ steps.parse.outputs.php }},${{ steps.parse.outputs.webserver }},${{ steps.parse.outputs.database }}${{ steps.parse.outputs.db }}

    - name: Upload controllers test coverage to Codecov
      if: ${{ env.ENABLE_COVERAGE == 'true' && !cancelled() && hashFiles('coverage.controllers.clover.xml') != '' }}
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.controllers.clover.xml
        flags: controllers,php${{ steps.parse.outputs.php }},${{ steps.parse.outputs.webserver }},${{ steps.parse.outputs.database }}${{ steps.parse.outputs.db }}

    - name: Common testing
      if: ${{ success() || failure() }}
      run: |
        . ci/ciLibrary.source
        build_test common

    - name: Upload common test results to Codecov
      if: ${{ !cancelled() && hashFiles('junit-common.xml') != '' }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: junit-common.xml
        flags: common,php${{ steps.parse.outputs.php }},${{ steps.parse.outputs.webserver }},${{ steps.parse.outputs.database }}${{ steps.parse.outputs.db }}

    - name: Upload common test coverage to Codecov
      if: ${{ env.ENABLE_COVERAGE == 'true' && !cancelled() && hashFiles('coverage.common.clover.xml') != '' }}
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.common.clover.xml
        flags: common,php${{ steps.parse.outputs.php }},${{ steps.parse.outputs.webserver }},${{ steps.parse.outputs.database }}${{ steps.parse.outputs.db }}

    - name: Email testing
      if: ${{ success() || failure() }}
      run: |
        . ci/ciLibrary.source
        build_test email

    - name: Upload email test results to Codecov
      if: ${{ !cancelled() && hashFiles('junit-email.xml') != '' }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: junit-email.xml
        flags: email,php${{ steps.parse.outputs.php }},${{ steps.parse.outputs.webserver }},${{ steps.parse.outputs.database }}${{ steps.parse.outputs.db }}

    - name: Upload email test coverage to Codecov
      if: ${{ env.ENABLE_COVERAGE == 'true' && !cancelled() && hashFiles('coverage.email.clover.xml') != '' }}
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.email.clover.xml
        flags: email,php${{ steps.parse.outputs.php }},${{ steps.parse.outputs.webserver }},${{ steps.parse.outputs.database }}${{ steps.parse.outputs.db }}

    ##
    # Activate prepend and shutdown code for webserver for e2e tests
    - name: E2e setup
      if: ${{ (success() || failure()) && steps.parse.outputs.e2e_enabled == 'true' }}
      run: |
        . ci/ciLibrary.source
        setup_e2e_bookends ${{ steps.parse.outputs.webserver }}

    ##
    # To skip E2E tests for specific docker directories,
    # rename the docker directory to end with "_no-e2e".
    - name: E2e testing
      if: ${{ (success() || failure()) && steps.parse.outputs.e2e_enabled == 'true' }}
      env:
        # Change this to just 'selenium' to disable video recording.
        COMPOSE_PROFILES: video-recording
        ENABLE_COVERAGE: 'false'
      run: |
        . ci/ciLibrary.source
        build_test e2e

    ##
    # The logs for the e2e run are directly in the container logs for nginx/php-fpm
    # but in /var/log/apache2/error.log for apache.
    - name: E2e container logs
      if: ${{ (success() || failure()) && steps.parse.outputs.e2e_enabled == 'true' }}
      run: |
        . ci/ciLibrary.source
        dc logs openemr

    - name: E2e error logs
      if: ${{ (success() || failure()) && steps.parse.outputs.e2e_enabled == 'true' && steps.parse.outputs.webserver == 'apache' }}
      run: |
        . ci/ciLibrary.source
        dump_error_log ${{ steps.parse.outputs.webserver }}

    - name: E2e selenium logs
      if: ${{ (success() || failure()) && steps.parse.outputs.e2e_enabled == 'true' }}
      run: |
        . ci/ciLibrary.source
        dc logs selenium

    - name: E2e video logs
      if: ${{ (success() || failure()) && steps.parse.outputs.e2e_enabled == 'true' }}
      run: |
        . ci/ciLibrary.source
        dc logs video

    - name: Upload e2e test results to Codecov
      if: ${{ !cancelled() && hashFiles('junit-e2e.xml') != '' }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: junit-e2e.xml
        flags: e2e,php${{ steps.parse.outputs.php }},${{ steps.parse.outputs.webserver }},${{ steps.parse.outputs.database }}${{ steps.parse.outputs.db }}

    - name: Upload E2E test videos to GitHub
      if: ${{ (success() || failure()) && steps.parse.outputs.e2e_enabled == 'true' && hashFiles('selenium-videos/video.mp4') != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-videos-${{ steps.parse.outputs.docker_dir }}
        path: selenium-videos/

    - name: Upload JUnit test results to GitHub
      if: ${{ !cancelled() && hashFiles('junit-*.xml') != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: junit-test-results-${{ steps.parse.outputs.docker_dir }}
        path: junit-*.xml

    - name: Combine coverage
      if: ${{ env.ENABLE_COVERAGE == 'true' && (success() || failure()) }}
      run: |
        . ci/ciLibrary.source
        merge_coverage

    - name: Check if combined coverage files exist
      if: ${{ env.ENABLE_COVERAGE == 'true' && (success() || failure()) }}
      id: check-files
      run: |
        echo "clover_exists=$(test -f coverage.clover.xml && echo true || echo false)" >> $GITHUB_OUTPUT
        echo "htmlcov_exists=$(test -d ./htmlcov && echo true || echo false)" >> $GITHUB_OUTPUT

    - name: Upload clover coverage to GitHub
      uses: actions/upload-artifact@v4
      if: ${{ env.ENABLE_COVERAGE == 'true' && steps.check-files.outputs.clover_exists == 'true' && (success() || failure()) }}
      with:
        name: coverage.clover.xml
        path: coverage.clover.xml

    - name: Upload html coverage to GitHub
      uses: actions/upload-artifact@v4
      if: ${{ env.ENABLE_COVERAGE == 'true' && steps.check-files.outputs.htmlcov_exists == 'true' && (success() || failure()) }}
      with:
        name: htmlcov
        path: ./htmlcov/

    - name: Test Summary
      if: ${{ always() }}
      run: |
        # Determine status emoji
        case "${{ job.status }}" in
          success)
            status_emoji="✅"
            ;;
          failure)
            status_emoji="❌"
            ;;
          cancelled)
            status_emoji="🚫"
            ;;
          *)
            status_emoji="❓"
            ;;
        esac

        {
          echo "| Status | PHP | Webserver | Database | E2E | Coverage | Docker Dir |"
          echo "| --- | --- | --- | --- | --- | --- | --- |"
          echo "| ${status_emoji} ${{ job.status }} | ${{ steps.parse.outputs.php }} | ${{ steps.parse.outputs.webserver }} | ${{ steps.parse.outputs.database }} ${{ steps.parse.outputs.db }} | ${{ steps.parse.outputs.e2e_enabled }} | ${{ env.ENABLE_COVERAGE }} | ${{ steps.parse.outputs.docker_dir }} |"
        } >> $GITHUB_STEP_SUMMARY
