name: ShellCheck
on:
  push:
    branches:
    - master
    # GitHub Actions do not support YAML anchors
    # There are five places in here we must keep
    # the paths in sync and the exclusion logic.
    paths:
    - '**.sh'
    - '**.source'
    - '.github/workflows/shellcheck.yml'
    - '.shellcheckrc'
    - contrib/util/restore
    - contrib/util/ubuntu_package_scripts/production/config
    - contrib/util/ubuntu_package_scripts/production/postinst
    - contrib/util/ubuntu_package_scripts/production/postrm
    - contrib/util/ubuntu_package_scripts/production/preinst
    - contrib/util/ubuntu_package_scripts/production/prerm
    - docker/library/dockers/dev-php-fpm/data/docker-php-entrypoint
    - docker/library/dockers/dev-php-fpm/data/docker-php-ext-configure
    - docker/library/dockers/dev-php-fpm/data/docker-php-ext-enable
    - docker/library/dockers/dev-php-fpm/data/docker-php-ext-install
    - docker/library/dockers/dev-php-fpm/data/docker-php-source
  pull_request:
    branches:
    - master
    paths:
    - '**.sh'
    - '**.source'
    - '.github/workflows/shellcheck.yml'
    - '.shellcheckrc'
    - contrib/util/restore
    - contrib/util/ubuntu_package_scripts/production/config
    - contrib/util/ubuntu_package_scripts/production/postinst
    - contrib/util/ubuntu_package_scripts/production/postrm
    - contrib/util/ubuntu_package_scripts/production/preinst
    - contrib/util/ubuntu_package_scripts/production/prerm
    - docker/library/dockers/dev-php-fpm/data/docker-php-entrypoint
    - docker/library/dockers/dev-php-fpm/data/docker-php-ext-configure
    - docker/library/dockers/dev-php-fpm/data/docker-php-ext-enable
    - docker/library/dockers/dev-php-fpm/data/docker-php-ext-install
    - docker/library/dockers/dev-php-fpm/data/docker-php-source
jobs:
  shellcheck:
    name: ShellCheck
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup PHP with cs2pr
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        # cs2pr enables us to convert checkstyle output to github annotations
        tools: cs2pr
    - name: Get changed shell files
      id: changed-files
      # We run shellcheck on all unique shell files in the repo
      # if only the workflow file itself is changed in a PR.
      # Thus we validate changes to the workflow file.
      continue-on-error: true
      uses: tj-actions/changed-files@v46
      with:
        # Keep the paths in sync with the paths in the on.push and on.pull_request sections
        # See https://github.com/tj-actions/changed-files/blob/v46/README.md#inputs-%EF%B8%8F
        # for tj-actions/changed-files specific syntax
        files: |
          **.sh
          **.source
          .env.example
          contrib/util/restore
          contrib/util/ubuntu_package_scripts/production/config
          contrib/util/ubuntu_package_scripts/production/postinst
          contrib/util/ubuntu_package_scripts/production/postrm
          contrib/util/ubuntu_package_scripts/production/preinst
          contrib/util/ubuntu_package_scripts/production/prerm
          docker/library/dockers/dev-php-fpm/data/docker-php-entrypoint
          docker/library/dockers/dev-php-fpm/data/docker-php-ext-configure
          docker/library/dockers/dev-php-fpm/data/docker-php-ext-enable
          docker/library/dockers/dev-php-fpm/data/docker-php-ext-install
          docker/library/dockers/dev-php-fpm/data/docker-php-source
    - name: Create unique files list
      id: unique-files
      run: |
        set -x
        # Create a temp directory to store file hashes
        mkdir -p /tmp/shellcheck-hashes

        # Initialize variable to hold unique files
        unique_files=''

        # If the changed-files step failed or returned empty,
        # use git to find all shell files in the repo.
        if [[ "${{ steps.changed-files.outcome }}" = success && "${{ steps.changed-files.outputs.any_changed }}" = true ]]; then
          echo 'Changed files found, checking only those.'
          set -f  # disable glob expansion
          files_to_check=( ${{ steps.changed-files.outputs.all_changed_files }} )
          set +f  # re-enable glob expansion
        else
          echo 'No changed files found, checking all shell files in the repo.'
          # Use the same paths as in the on.push and on.pull_request sections
          # to ensure we only check shell files.
          # Use globstar to find shell files in subdirectories.
          # We can't easily exclude obsolete here, so we exclude it later...
          shopt -s globstar nullglob
          files_to_check+=(
            **/*.sh
            **/*.source
            contrib/util/restore
            contrib/util/ubuntu_package_scripts/production/config
            contrib/util/ubuntu_package_scripts/production/postinst
            contrib/util/ubuntu_package_scripts/production/postrm
            contrib/util/ubuntu_package_scripts/production/preinst
            contrib/util/ubuntu_package_scripts/production/prerm
            docker/library/dockers/dev-php-fpm/data/docker-php-entrypoint
            docker/library/dockers/dev-php-fpm/data/docker-php-ext-configure
            docker/library/dockers/dev-php-fpm/data/docker-php-ext-enable
            docker/library/dockers/dev-php-fpm/data/docker-php-ext-install
            docker/library/dockers/dev-php-fpm/data/docker-php-source
          )
        fi

        unique_files=()
        # Process each changed file
        for file in "${files_to_check[@]}"; do
          [[ -f "$file" ]] || continue
          # Skip files in the obsolete directory
          [[ "$file" = docker/openemr/obsolete/* ]] && continue
          # Get hash of file content
          hash=$(sha256sum "$file" | cut -d ' ' -f 1)
          # Check if we've seen this hash before
          [[ -f "/tmp/shellcheck-hashes/$hash" ]] && continue
          # New unique file
          > "/tmp/shellcheck-hashes/$hash"
          unique_files+=( "$file" )
        done

        # This relies on one space between each path name.
        echo "files=${unique_files[*]}" >> "$GITHUB_OUTPUT"
    - name: Run shellcheck on unique files
      if: ${{ steps.unique-files.outputs.files != '' }}
      # Pipefail is somehow only enabled when we explicitly
      # specify the shell as bash, even though bash is the
      # default shell. I would complain further, but
      # this kind of inconsistency is very shell-like anyway.
      shell: bash
      run: |
        shellcheck --check-sourced --external-sources --format=checkstyle ${{ steps.unique-files.outputs.files }} | tee checkstyle-shellcheck.xml
    - uses: staabm/annotate-pull-request-from-checkstyle-action@v1
      if: ${{ failure() && hashFiles('checkstyle-shellcheck.xml') != '' }}
      with:
        files: checkstyle-shellcheck.xml
        notices-as-warnings: true
    - name: Upload shellcheck results
      if: ${{ failure() && hashFiles('checkstyle-shellcheck.xml') != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: shellcheck-results
        path: checkstyle-shellcheck.xml
        if-no-files-found: error
