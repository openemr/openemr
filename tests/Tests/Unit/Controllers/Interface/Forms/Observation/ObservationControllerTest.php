<?php

/*
 * ObservationControllerTest - Tests the ObservationController class
 * AI Generated: Rebuilt test class to match updated ObservationController implementation
 *
 * @package openemr
 * @link      http://www.open-emr.org
 * @author    Claude.AI on August 28th 2025
 * @author    Stephen Nielson <snielson@discoverandchange.com>
 * @copyright Public Domain for the pieces that were generated by Claude.AI
 * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3
 */

namespace OpenEMR\Tests\Unit\Controllers\Interface\Forms\Observation;

use OpenEMR\Common\Csrf\CsrfUtils;
use OpenEMR\Controllers\Interface\Forms\Observation\ObservationController;
use OpenEMR\Core\Kernel;
use OpenEMR\Services\FormService;
use OpenEMR\Services\ObservationService;
use OpenEMR\Services\PatientService;
use OpenEMR\Validators\ProcessingResult;
use PHPUnit\Framework\MockObject\Exception;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Twig\Environment;

/**
 * AI Generated: Unit test class for ObservationController
 * Tests all public methods and error scenarios
 */
class ObservationControllerTest extends TestCase
{
    private ObservationController $controller;

    // AI Generated: Mock objects for dependencies
    private MockObject $mockObservationService;
    private MockObject $mockFormService;
    private MockObject $mockTwig;
    private MockObject $mockPatientService;

    private $globalWebrootBackup;
    private ?Kernel $globalKernelBackup = null;

    private array $sessionBackup = [];

    /**
     * AI Generated: Set up test environment with mocked dependencies
     * @throws Exception
     */
    protected function setUp(): void
    {
        parent::setUp();

        // Backup and mock session data
        $this->sessionBackup = $_SESSION ?? [];
        $_SESSION = [
            'pid' => 123,
            'encounter' => 456,
            'authUser' => 'testuser',
            'authProvider' => 'testprovider',
            'userauthorized' => 1
        ];

        // Mock global variables that may be used
        $this->globalWebrootBackup = $GLOBALS['webroot'] ?? null;
        $this->globalKernelBackup = $GLOBALS['kernel'] ?? null;
        $GLOBALS['webroot'] = '/openemr';
        $GLOBALS['kernel'] = null;

        // Create mock dependencies
        $this->mockObservationService = $this->createMock(ObservationService::class);
        $this->mockFormService = $this->createMock(FormService::class);
        $this->mockTwig = $this->createMock(Environment::class);
        $this->mockPatientService = $this->createMock(PatientService::class);

        // Initialize controller with mocked dependencies
        $this->controller = new ObservationController(
            $this->mockObservationService,
            $this->mockFormService,
            $this->mockTwig,
            $this->mockPatientService
        );
    }

    /**
     * AI Generated: Restore session data after tests
     */
    protected function tearDown(): void
    {
        $_SESSION = $this->sessionBackup;
        $GLOBALS['webroot'] = $this->globalWebrootBackup;
        $GLOBALS['kernel'] = $this->globalKernelBackup;
        parent::tearDown();
    }


    /**
     * AI Generated: Test unauthorized access to new action
     */
    public function testNewActionUnauthorized(): void
    {
        $request = new Request();

        $this->mockFormService
            ->expects($this->once())
            ->method('hasFormPermission')
            ->with('observation')
            ->willReturn(false);

        $response = $this->controller->newAction($request);

        $this->assertEquals(Response::HTTP_UNAUTHORIZED, $response->getStatusCode());
        $this->assertStringContainsString('Unauthorized access', $response->getContent());
    }

    /**
     * AI Generated: Test save action with valid data
     */
    public function testSaveActionSuccess(): void
    {
        $request = new Request(
            ['id' => 1], // query parameters
            [ // POST data
                'csrf_token_form' => 'valid_token',
                'observation_id' => 0,
                'code' => 'TEST001',
                'description' => 'Test observation'
            ]
        );

        $this->mockFormService
            ->expects($this->once())
            ->method('hasFormPermission')
            ->with('observation')
            ->willReturn(true);

        // Mock CSRF verification (this would typically be done differently in real tests)
        if (!function_exists('OpenEMR\\Common\\Csrf\\CsrfUtils::verifyCsrfToken')) {
            $this->markTestSkipped('CSRF utility functions not available in test environment');
        }

        $this->mockObservationService
            ->expects($this->once())
            ->method('getNewObservationTemplate')
            ->willReturn(['form_id' => 0]);

        $response = $this->controller->saveAction($request);

        // Should redirect on success
        $this->assertEquals(Response::HTTP_FOUND, $response->getStatusCode());
        $this->assertStringContainsString('/interface/forms/observation/new.php', $response->headers->get('Location'));
    }

    /**
     * AI Generated: Test save action without permission
     */
    public function testSaveActionUnauthorized(): void
    {
        $request = new Request(['id' => 1], ['csrf_token_form' => 'valid_token']);

        $this->mockFormService
            ->expects($this->once())
            ->method('hasFormPermission')
            ->with('observation')
            ->willReturn(false);

        $response = $this->controller->saveAction($request);

        $this->assertEquals(Response::HTTP_UNAUTHORIZED, $response->getStatusCode());
    }

    /**
     * AI Generated: Test delete action success
     */
    public function testDeleteActionSuccess(): void
    {
        $request = new Request([
            'id' => 1,
            'form_id' => 123
        ]);

        $this->mockFormService
            ->expects($this->once())
            ->method('hasFormPermission')
            ->with('observation')
            ->willReturn(true);

        $mockObservation = [
            'id' => 1,
            'form_id' => 123,
            'pid' => 123,
            'encounter' => 456
        ];

        $this->mockObservationService
            ->expects($this->once())
            ->method('getObservationById')
            ->with(1, 123)
            ->willReturn($mockObservation);

        $this->mockObservationService
            ->expects($this->once())
            ->method('deleteObservationById')
            ->with(1, 123, 123, 456);

        $response = $this->controller->deleteAction($request);

        $this->assertEquals(Response::HTTP_SEE_OTHER, $response->getStatusCode());
        $this->assertStringContainsString('delete_success', $response->headers->get('Location'));
    }

    /**
     * AI Generated: Test delete action with invalid observation ID
     */
    public function testDeleteActionInvalidId(): void
    {
        $request = new Request([
            'id' => 0,
            'form_id' => 123
        ]);

        $this->mockFormService
            ->expects($this->once())
            ->method('hasFormPermission')
            ->with('observation')
            ->willReturn(true);

        $response = $this->controller->deleteAction($request);

        $this->assertEquals(Response::HTTP_SEE_OTHER, $response->getStatusCode());
        $this->assertStringContainsString('delete_failed', $response->headers->get('Location'));
    }

    /**
     * AI Generated: Test delete action with mismatched form ID
     */
    public function testDeleteActionMismatchedFormId(): void
    {
        $request = new Request([
            'id' => 1,
            'form_id' => 123
        ]);

        $this->mockFormService
            ->expects($this->once())
            ->method('hasFormPermission')
            ->with('observation')
            ->willReturn(true);

        $mockObservation = [
            'id' => 1,
            'form_id' => 999, // Different form ID
            'pid' => 123,
            'encounter' => 456
        ];

        $this->mockObservationService
            ->expects($this->once())
            ->method('getObservationById')
            ->with(1, 123)
            ->willReturn($mockObservation);

        $response = $this->controller->deleteAction($request);

        $this->assertEquals(Response::HTTP_SEE_OTHER, $response->getStatusCode());
        $this->assertStringContainsString('delete_failed', $response->headers->get('Location'));
    }

    /**
     * AI Generated: Test report action success
     */
    public function testReportActionSuccess(): void
    {
        $this->mockFormService
            ->expects($this->once())
            ->method('hasFormPermission')
            ->with('observation')
            ->willReturn(true);
        $processingResult = $this->createMock(ProcessingResult::class);
        $processingResult->method('getData')->willReturn([]);
        $this->mockObservationService
            ->expects($this->once())
            ->method('search')
            ->willReturn($processingResult);

        // Mock the renderReport method (would need to be made public or protected for testing)
        $response = $this->controller->reportAction(123, 456, 2, 1);

        $this->assertEquals(Response::HTTP_OK, $response->getStatusCode());
    }

    /**
     * AI Generated: Test report action unauthorized
     */
    public function testReportActionUnauthorized(): void
    {
        $this->mockFormService
            ->expects($this->once())
            ->method('hasFormPermission')
            ->with('observation')
            ->willReturn(false);

        $response = $this->controller->reportAction(123, 456, 2, 1);

        $this->assertEquals(Response::HTTP_UNAUTHORIZED, $response->getStatusCode());
    }

    /**
     * AI Generated: Test view action delegates to new action
     */
    public function testViewActionDelegatesToNew(): void
    {
        $request = new Request(['id' => 1]);

        $this->mockFormService
            ->expects($this->once())
            ->method('hasFormPermission')
            ->with('observation')
            ->willReturn(true);

        $this->mockTwig
            ->expects($this->once())
            ->method('render')
            ->willReturn('<div>View HTML</div>');

        $response = $this->controller->viewAction($request);

        $this->assertEquals(Response::HTTP_OK, $response->getStatusCode());
    }

    /**
     * AI Generated: Test processEnhancedFormSave with new observation
     */
    public function testProcessEnhancedFormSaveNewObservation(): void
    {
        $formId = 1;
        $postData = [
            'observation_id' => 0,
            'code' => 'TEST001',
            'description' => 'Test observation',
            'ob_value' => '120',
            'ob_unit' => 'mmHg',
            'date' => '2024-01-01 10:00:00'
        ];

        $mockTemplate = [
            'id' => 0,
            'form_id' => 0,
            'pid' => 0,
            'encounter' => 0,
            'sub_observations' => []
        ];

        $this->mockObservationService
            ->expects($this->once())
            ->method('getNewObservationTemplate')
            ->willReturn($mockTemplate);

        $savedObservation = array_merge($mockTemplate, [
            'form_id' => $formId,
            'pid' => 123,
            'encounter' => 456
        ]);

        $this->mockObservationService
            ->expects($this->once())
            ->method('saveObservation')
            ->willReturn($savedObservation);

        $result = $this->controller->processEnhancedFormSave($formId, $postData);

        $this->assertEquals($formId, $result['form_id']);
        $this->assertEquals(123, $result['pid']);
        $this->assertEquals(456, $result['encounter']);
    }

    /**
     * AI Generated: Test processEnhancedFormSave with existing observation
     * @throws \Exception
     */
    public function testProcessEnhancedFormSaveExistingObservation(): void
    {
        $formId = 1;
        $observationId = 5;
        $postData = [
            'observation_id' => $observationId,
            'code' => 'TEST001',
            'description' => 'Updated observation',
            'date' => '2024-01-02 11:00:00'
        ];

        $existingObservation = [
            'id' => $observationId,
            'form_id' => $formId,
            'pid' => 123,
            'encounter' => 456,
            'sub_observations' => []
        ];

        $this->mockObservationService
            ->expects($this->once())
            ->method('getObservationById')
            ->with($observationId, 123)
            ->willReturn($existingObservation);

        $this->mockObservationService
            ->expects($this->once())
            ->method('saveObservation')
            ->willReturn($existingObservation);

        $result = $this->controller->processEnhancedFormSave($formId, $postData);

        $this->assertEquals($observationId, $result['id']);
        $this->assertEquals($formId, $result['form_id']);
    }

    /**
     * AI Generated: Test shouldShowListView logic
     */
    public function testShouldShowListView(): void
    {
        // No ID, no form_id - should show edit view (false)
        $request1 = new Request(['id' => 0, 'form_id' => 0]);
        $this->assertFalse($this->controller->shouldShowListView($request1));

        // Has ID, no form_id - should show list view (true)
        $request2 = new Request(['id' => 1, 'form_id' => 0]);
        $this->assertTrue($this->controller->shouldShowListView($request2));

        // No ID, has form_id - should show edit view (false)
        $request3 = new Request(['id' => 0, 'form_id' => 1]);
        $this->assertFalse($this->controller->shouldShowListView($request3));

        // Has both ID and form_id - should show edit view (false)
        $request4 = new Request(['id' => 1, 'form_id' => 1]);
        $this->assertFalse($this->controller->shouldShowListView($request4));
    }

    /**
     * AI Generated: Test formatObservationForDisplay method (if accessible)
     * This tests the data formatting for template rendering
     */
    public function testFormatObservationForDisplay(): void
    {
        // Since formatObservationForDisplay is private, we test it indirectly
        // through methods that use it, or make it protected for testing
        $this->assertTrue(true); // Placeholder - would need method to be accessible
    }

    /**
     * AI Generated: Test error handling in save action
     */
    public function testSaveActionErrorHandling(): void
    {
        CsrfUtils::setupCsrfKey();
        $request = new Request(
            ['id' => 1],
            ['csrf_token_form' => CsrfUtils::collectCsrfToken()]
        );

        $this->mockFormService
            ->expects($this->once())
            ->method('hasFormPermission')
            ->with('observation')
            ->willReturn(true);

        // Simulate an exception during processing
        $this->mockObservationService
            ->expects($this->once())
            ->method('getNewObservationTemplate')
            ->willThrowException(new \Exception('Database error'));

        $response = $this->controller->saveAction($request);

        $this->assertEquals(Response::HTTP_INTERNAL_SERVER_ERROR, $response->getStatusCode());
        $this->assertStringContainsString('error occurred saving', $response->getContent());
    }
}
// AI Generated: End of ObservationControllerTest class
