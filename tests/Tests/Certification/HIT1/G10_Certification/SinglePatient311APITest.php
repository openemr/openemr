<?php

namespace OpenEMR\Tests\Certification\HIT1\G10_Certification;

use OpenEMR\Tests\Api\ApiTestClient;
use OpenEMR\Tests\Certification\HIT1\G10_Certification\Trait\G10ApiTestTrait;
use PHPUnit\Framework\TestCase;
use PHPUnit\Framework\Attributes\Test;
use Exception;

class SinglePatient311APITest extends TestCase
{
    use G10ApiTestTrait;

    /**
     * @return void
     * @throws Exception
     */
    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
        self::setupG10Test();
        // for now this uses the admin user to authenticate
        // TODO: @adunsulag need to implement this using a test practitioner user so we can test the inferno single patient API from a regular provider
        self::$testClient->setAuthToken(ApiTestClient::OPENEMR_AUTH_ENDPOINT);
    }

    #[Test]
    /**
     * @throws Exception
     */
    public function testSingleApiRun(): void
    {
        // we will use the filesystem to write out the test run settings so that we can see them in the code coverage report
        $response = $this->getTestGroupResponse(
            $this->getTestSuitePrefix() . 'g10_single_patient_api',
            $this->getTestInputs('smart_auth_info')
        );
        // useful for debugging the unit test...
        $this->assertNotEmpty($response['results'], "Test run results are empty for single patient API tests");
        // assert that the results are all passed
        $testsFailed = 0;
        $testsTotal = count($response['results']);
        foreach ($response['results'] as $result) {
            echo self::getDisplayName($result['test_id'] ?? $result['test_group_id']) . ": " . $result['result'] . "\n";
            // we have omit, skip, warn, etc we'll just key off fail at this point
            if ($result['result'] == 'fail') {
                $testsFailed += 1;
            }
        }
        if ($testsFailed > 0) {
            echo "Detailed Test Results:\n\n";
            $this->renderResults($response['results'], "Single patient API tests did not pass", [
                // TODO: @adunsulag remove these skips as they aren't needed anymore I believe.
                // we skip the standalone auth TLS test for now as the unit test environment does not support TLS
                'us_core_v311-us_core_v311_fhir_api-us_core_v311_capability_statement-standalone_auth_tls'
                // we skip the overall group failure test as the sub test failing triggers the group failure
                ,'us_core_v311-us_core_v311_fhir_api-us_core_v311_capability_statement'
            ]);
        }
        $this->assertEquals(0, $testsFailed, "Single API Test Failed.  Total tests failed " . $testsFailed . " out of " . $testsTotal . " tests run. Please see above for details.");
    }

    protected function getTestInputs(string $credentialsKeyName): array
    {
        $credentialsArray = [
            'access_token' => self::$testClient->getAccessToken()
            , 'refresh_token' => self::$testClient->getRefreshToken()
            , 'client_id' => self::$testClient->getClientId()
            , 'client_secret' => self::$testClient->getClientSecret()
            , 'token_url' => self::$baseUrl . self::$testClient::OAUTH_TOKEN_ENDPOINT
            // shared secret of client_secret is used for symmetric auth
            // for asymmetric auth, we would use the public key of the registed JWKS
            , 'auth_type' => 'symmetric'
        ];
        if (self::TEST_SUITE == self::TEST_SUITE_G10_CERTIFICATION) {
            return [
                ['name' => 'url', 'value' => self::$baseUrl . '/apis/default/fhir'],
                ['name' => 'patient_id', 'value' => self::PATIENT_ID_PRIMARY],
//                ['name' => 'patient_ids', 'value' => self::PATIENT_IDS],
                ['name' => 'additional_patient_ids', 'value' => self::ADDITIONAL_PATIENT_IDS],
                ['name' => $credentialsKeyName, 'value' => $credentialsArray]
            ];
        } else {
            return [
                ['name' => 'url', 'value' => self::$baseUrl . '/apis/default/fhir'],
                ['name' => 'patient_ids', 'value' => self::PATIENT_IDS],
                ['name' => $credentialsKeyName, 'value' => $credentialsArray]
            ];
        }
    }
}
