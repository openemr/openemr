<?php

/**
 * Represents a contact address object in OpenEMR and in the database.  Follows the Active Record design pattern for
 * loading and persisting data to the database.
 *
 * @package   OpenEMR
 * @link      https://www.open-emr.org
 *
 * @author    David Eschelbacher <psoas@tampabay.rr.com>
 * @copyright Copyright (c) 2025 David Eschelbacher <psoas@tampabay.rr.com>
 * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3
 */

namespace OpenEMR\Common\ORDataObject;

use OpenEMR\Common\ORDataObject\Contact;
use OpenEMR\Common\ORDataObject\Address;
use DateTime;
use OpenEMR\Services\Utils\DateFormatterUtils;

class Person extends ORDataObject implements \JsonSerializable
{

    private $id;
    private $firstname;
    private $lastname;
    private $birth_date;
    private $death_date;
    private $email;
    private $photo;
    private $communication;    // Languages
    private $createdDate;

    private $author;

    private $_contact;
    private $_relatedPerson;


    /**
     * Constructor sets all attributes to their default value
     */
    public function __construct($id = "")
    {
        parent::__construct("person");
        $this->setThrowExceptionOnError(true);
        // we set our defaults, populate can override this if  needed.
        $this->id = $id;
        $this->author = $_SESSION['authUser'];
        $this->firstname = "";
        $this->lastname = "";
        $this->gender = "";
        $this->birth_date = "";
        $this->death_date = "";
        $this->email = "";
        $this->photo = "";
        $this->communication = "";
        $this->email = "";
        $this->createdDate = new DateTime();

        if ($id != "") {
            $this->populate();
            $this->setIsObjectModified(false);
        }
    }

    protected function get_date_fields()
    {
        return ['created_date', 'birth_date', 'death_date'];
    }

    public function populate_array($results)
    {
        if (is_array($results)) {
            foreach ($this->get_date_fields() as $field) {
                if (isset($results[$field])) {
                    $results[$field] = \DateTime::createFromFormat("Y-m-d H:i:s", $results[$field]);
                }
            }
        }
        parent::populate_array($results); // TODO: Change the autogenerated stub
    }

    public function persist()
    {


        return parent::persist(); // TODO: Change the autogenerated stub
    }


    /**
     * Get and Set Database Columns
    */

    public function get_id(): int
    {
        return $this->id;
    }

    public function set_id($id): Person
    {
        $this->id = $id;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_firstname(): string
    {
        return $this->firstname;
    }

    public function set_firstname(string $firstname): Person
    {
        $this->firstname = $firstname;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_lastname(): string
    {
        return $this->lastname;
    }

    public function set_lastname(string $lastname): Person
    {
        $this->lastname = $lastname;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_gender(): string
    {
        return $this->gender;
    }

    public function set_gender(string $gender): Person
    {
        $this->gender = $gender;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_birth_date(): Datetime
    {
        return $this->birth_date;
    }

    public function set_birth_date(Datetime $birth_date): Person
    {
        $this->birth_date = $birth_date;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_death_date(): ?Datetime
    {
        return $this->death_date;
    }

    public function set_death_date(?Datetime $death_date): Person
    {
        $this->death_date = $death_date;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_email(): string
    {
        return $this->email;
    }

    public function set_email(string $email): Person
    {
        $this->email = $email;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_photo(): ?string
    {
        return $this->photo;
    }

    public function set_photo(?string $photo): Person
    {
        $this->photo = $photo;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_photo(): ?string
    {
        return $this->photo;
    }

    public function set_photo(?string $photo): Person
    {
        $this->photo = $photo;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_author(): string
    {
        return $this->author;
    }

    public function set_author(string $author): ContactAddress
    {
        $this->author = $author;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function toArray()
    {
        return $this->jsonSerialize();
    }

    /**
     * Specify data which should be serialized to JSON
     * @link https://php.net/manual/en/jsonserializable.jsonserialize.php
     * @return mixed data which can be serialized by <b>json_encode</b>,
     * which is a value of any type other than a resource.
     * @since 5.4.0
     */
    public function jsonSerialize(): mixed
    {
        $result = [
            "id" => $this->get_id(),
            'author' => $this->get_author(),
            'firstname' => $this->get_firstname(),
            'lastname' => $this->get_lastname(),
            'gender' => $this->get_gender(),
            'birth_date' => null,
            'death_date' => null,
            'email' => $this->get_email(),
            'photo' => $this->get_photo(),
            'communication' => $this->get_communication(),
            'created_date' => null
        ];
        if (!empty($this->get_birth_date())) {
            $result['birth_date'] = DateFormatterUtils::oeFormatShortDate($this->get_period_end()->format("Y-m-d"));
        }
        if (!empty($this->get_death_date())) {
            $result['death_date'] = DateFormatterUtils::oeFormatShortDate($this->get_period_start()->format("Y-m-d"));
        }
        if (!empty($this->get_created_date())) {
            $result['created_date'] = DateFormatterUtils::oeFormatShortDate($this->get_period_start()->format("Y-m-d"));
        }
        return $result;
    }
}
