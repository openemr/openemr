<?php

/**
 * Represents a contact address object in OpenEMR and in the database.  Follows the Active Record design pattern for
 * loading and persisting data to the database.
 *
 * @package   OpenEMR
 * @link      https://www.open-emr.org
 *
 * @author    David Eschelbacher <psoas@tampabay.rr.com>
 * @copyright Copyright (c) 2025 David Eschelbacher <psoas@tampabay.rr.com>
 * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3
 */

namespace OpenEMR\Common\ORDataObject;

use OpenEMR\Common\ORDataObject\Contact;
use OpenEMR\Common\ORDataObject\Address;
use DateTime;
use OpenEMR\Services\Utils\DateFormatterUtils;

class ContactRelation extends ORDataObject implements \JsonSerializable
{

    private $id;
    private $contact_id;
    private $uuid;
    private $related_foreign_table_name;
    private $related_foreign_table_id;
    private $active;
    private $role;
    private $relationship;
    private $contact_priority
    private $is_primary_contact;
    private $is_emergency_contact;
    private $can_make_medical_decisions;
    private $can_receive_medical_info;
    private $start_date;
    private $end_date;
    private $notes;

    /**
     * Constructor sets all attributes to their default value
     */
    public function __construct($id = "")
    {
        parent::__construct("contact_relation");
        $this->setThrowExceptionOnError(true);
        // we set our defaults, populate can override this if  needed.
        $this->id = $id;
        $this->author = $_SESSION['authUser'];
        $this->contact_id = "";
        $this->uuid = "";
        $this->related_foreign_table_name = "";
        $this->related_foreign_table_id = "";
        $this->active = "";
        $this->role = "";
        $this->relationship = "";
        $this->contact_priority = "";
        $this->is_primary_contact = NULL;
        $this->is_emergency_contact = NULL;
        $this->can_make_medical_decisions = NULL;
        $this->can_receive_medical_info = NULL;
        $this->start_date = new DateTime();
        $this->end_date = new DateTime();
        $this->notes = "";


        if ($id != "") {
            $this->populate();
            $this->setIsObjectModified(false);
        }
    }

    protected function get_date_fields()
    {
        return ['start_date', 'end_date'];
    }

    public function populate_array($results)
    {
        if (is_array($results)) {
            foreach ($this->get_date_fields() as $field) {
                if (isset($results[$field])) {
                    $results[$field] = \DateTime::createFromFormat("Y-m-d H:i:s", $results[$field]);
                }
            }
        }
        parent::populate_array($results); // TODO: Change the autogenerated stub
    }

    public function persist()
    {
        return parent::persist(); // TODO: Change the autogenerated stub
    }


    /**
     * Get and Set Database Columns
    */

    public function get_id(): int
    {
        return $this->id;
    }

    public function set_id($id): ContactRelation
    {
        $this->id = $id;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_contact_id(): string
    {
        return $this->contact_id;
    }

    public function set_contact_id(string $firstname): ContactRelation
    {
        $this->contact_id = $contact_id;
        $this->setIsObjectModified(true);
        return $this;
    }

     public function get_uuid(): string
    {
        return $this->firstname;
    }

    public function set_uuid(string $uuid): ContactRelation
    {
        $this->uuid = $uuid;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_related_foreign_table_name(): string
    {
        return $this->related_foreign_table_name;
    }

    public function set_related_foreign_table_name(string $related_foreign_table_name): ContactRelation
    {
        $this->related_foreign_table_name = $related_foreign_table_name;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_active(): string
    {
        return $this->active;
    }

    public function set_active(string $active): ContactRelation
    {
        $this->active = $active;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_role(): string
    {
        return $this->role;
    }

    public function set_role(string $role): ContactRelation
    {
        $this->role = $role;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_relationship(): string
    {
        return $this->active;
    }

    public function set_relationship(string $contact_priority): ContactRelation
    {
        $this->relationship = $relationship;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_contact_priority(): string
    {
        return $this->contact_priority;
    }

    public function set_contact_priority(string $contact_priority): ContactRelation
    {
        $this->contact_priority = $contact_priority;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_is_primary_contact(): boolean
    {
        return $this->active;
    }

    public function set_is_primary_contact(string $is_primary_contact): ContactRelation
    {
        $this->is_primary_contact = $is_primary_contact;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_is_emergency_contact(): boolean
    {
        return $this->is_emergency_contact;
    }

    public function set_is_emergency_contact(string $is_emergency_contact): ContactRelation
    {
        $this->is_emergency_contact = $is_emergency_contact;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_can_make_medical_decisions(): boolean
    {
        return $this->can_make_medical_decisions;
    }

    public function set_can_make_medical_decisions: string $can_receive_medical_info): ContactRelation
    {
        $this->can_make_medical_decisions = $can_make_medical_decisions;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_can_receive_medical_info(): boolean
    {
        return $this->can_make_medical_decisions;
    }

    public function set_can_receive_medical_info: string $can_receive_medical_info): ContactRelation
    {
        $this->can_receive_medical_info = $can_receive_medical_info;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_start_date(): Datetime
    {
        return $this->start_date;
    }

    public function set_start_date(Datetime $start_date): ContactRelation
    {
        $this->start_date = $start_date;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_end_date(): ?Datetime
    {
        return $this->end_date;
    }

    public function set_end_date(Datetime $end_date): ContactRelation
    {
        $this->end_date = $end_date;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function get_author(): string
    {
        return $this->author;
    }

    public function set_author(string $author): ContactRelation
    {
        $this->author = $author;
        $this->setIsObjectModified(true);
        return $this;
    }

    public function toArray()
    {
        return $this->jsonSerialize();
    }

    /**
     * Specify data which should be serialized to JSON
     * @link https://php.net/manual/en/jsonserializable.jsonserialize.php
     * @return mixed data which can be serialized by <b>json_encode</b>,
     * which is a value of any type other than a resource.
     * @since 5.4.0
     */
    public function jsonSerialize(): mixed
    {
        $result = [
            'id' => $this->get_id(),
            'contact_id' => $this->get_contact_id(),
            'uuid' => $this->get_uuid(),
            'related_foreign_table_name' => $this->get_id(),
            'related_foreign_table_id' => $this->get_id(),
            'active' => $this->get_id(),
            'role' => $this->get_id(),
            'relationship' => $this->get_id(),
            'contact_priority' => $this->get_id(),
            'is_primary_contact' => $this->get_firstname(),
            'is_emergency_contact' => $this->get_lastname(),
            'can_make_medical_decisions' => $this->get_gender(),
            'can_receive_medical_info' => $this->get_birth_date,
            'start_date' => $this->death_date,
            'end_date' => $this->get_email(),
            'notes' => $this->get_photo(),
            'author' => $this->get_author(),
      ];
        if (!empty($this->get_birth_date())) {
            $result['birth_date'] = DateFormatterUtils::oeFormatShortDate($this->get_period_end()->format("Y-m-d"));
        }
        if (!empty($this->get_death_date())) {
            $result['death_date'] = DateFormatterUtils::oeFormatShortDate($this->get_period_start()->format("Y-m-d"));
        }
        if (!empty($this->get_created_date())) {
            $result['created_date'] = DateFormatterUtils::oeFormatShortDate($this->get_period_start()->format("Y-m-d"));
        }
        return $result;
    }
}
