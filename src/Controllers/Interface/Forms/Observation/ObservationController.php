<?php

/*
 * ObservationController.php handles all web requests for the observation form using Twig templates
 * AI Generated Note: Refactored from original ObservationController.php to use Twig templates and Design 1 implementation
 *
 * @package openemr
 * @link      http://www.open-emr.org
 * @author    Jacob T Paul <jacob@zhservices.com>
 * @author    Vinish K <vinish@zhservices.com>
 * @author    Brady Miller <brady.g.miller@gmail.com>
 * @author    Claude.AI on August 27th 2025
 * @copyright Copyright (c) 2015 Z&H Consultancy Services Private Limited <sam@zhservices.com>
 * @copyright Copyright (c) 2017-2019 Brady Miller <brady.g.miller@gmail.com>
 * @copyright Public Domain for the pieces that were generated by Claude.AI (refactor from interface/forms/observation) view.php,new.php,save.php
 * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3
 */

namespace OpenEMR\Controllers\Interface\Forms\Observation;

use OpenEMR\Common\Csrf\CsrfUtils;
use OpenEMR\Common\Forms\ReasonStatusCodes;
use OpenEMR\Common\Logging\SystemLogger;
use OpenEMR\Common\Twig\TwigContainer;
use OpenEMR\Services\CodeTypesService;
use OpenEMR\Services\FormService;
use OpenEMR\Services\ObservationService;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Twig\Environment;

// AI Generated Note: This controller was refactored to use Twig templates and support Design 1 implementation
class ObservationController
{
    private ObservationService $observationService;
    private FormService $formService;
    private Environment $twig;
    private SystemLogger $logger;

    private CodeTypesService $codeTypeService;

    public function __construct(
        ?ObservationService $observationService = null,
        ?FormService $formService = null,
        ?Environment $twig = null
    ) {
        $this->observationService = $observationService ?? new ObservationService();
        $this->formService = $formService ?? new FormService();
        $this->twig = $twig ?? (new TwigContainer(null, $GLOBALS['kernel']))->getTwig();
        $this->logger = new SystemLogger();
        $this->codeTypeService = new CodeTypesService();
    }

    public function setCodeTypesService(CodeTypesService $service): void
    {
        $this->codeTypeService = $service;
    }

    public function getCodeTypesService(): CodeTypesService
    {
        return $this->codeTypeService;
    }

    /**
     * Handle observation new/edit form using Twig template
     * AI Generated: Refactored to use Twig templates and Design 1 layout
     *
     * @param Request $request
     * @return Response
     */
    public function newAction(Request $request): Response
    {
        $formId = $request->query->getInt('form_id');
        $id = $request->query->getInt('id', 0);
        if ($formId <= 0) {
            $formId = $id; // openemr sends us the form_id as the id param for new forms
        }

        $pid = $_SESSION['pid'] ?? 0;
        $encounter = $_SESSION['encounter'] ?? 0;

        try {
            // Get observations for this form
            $observations = [];
            if ($id > 0) {
                $observation = $this->observationService->getObservationById($id, $pid);
                if ($observation) {
                    // Get sub-observations
                    $subObservations = $this->observationService->getSubObservations($id);
                    $observation['subObservations'] = $subObservations;
                    $observations[] = $observation;
                }
            }

            // If no observations found, create a default empty observation
            if (empty($observations)) {
                $observations = [
                    $this->observationService->getNewObservationTemplate()
                ];
            }

            // Get observation types and reason code statii
            $reasonCodeStatii = ReasonStatusCodes::getCodesWithDescriptions();

            // Prepare template data
            $templateData = [
                'formId' => $formId ?: $observations[0]['id'],
                'observations' => $observations,
                'reasonCodeStatii' => $reasonCodeStatii,
                'csrf_token' => CsrfUtils::collectCsrfToken(),
                'title' => xl('Observation Form'),
                // this function comes from
                'reasonCodeTypes' => $this->codeTypeService->collectCodeTypes("problem", "csv"),
                // TODO: it would be much nicer if this was all using the Symfony Form element... later
                'translations' => [
                    'CONFIRM_SUB_OBSERVATION_DELETE' => xl("Are you sure you want to delete this sub-observation? If appropriate, consider marking the status as 'Entered In Error'")
                    ,'VALIDATION_CODE_REQUIRED' => xl('Code is required')
                    ,'VALIDATION_DESCRIPTION_REQUIRED' => xl('Description is required')
                    ,'VALIDATION_DATE_REQUIRED' => xl('Date is required')
                    ,'VALIDATION_VALUE_REQUIRED' => xl('Value is required for the selected observation')
                    ,'VALIDATION_SUB_VALUE_REQUIRED' => xl('Value is required for the selected sub-observation')
                    ,'VALIDATION_SUB_DESCRIPTION_REQUIRED' => xl('Description is required for the selected sub-observation')
                ],
                // default status type for new observations, will be up to clinician to set status to be 'final' as needed
                'defaultStatusType' => 'preliminary'
            ];

            // Render the Twig template
            $content = $this->twig->render($this->getTemplatePath('observation_edit.html.twig'), $templateData);

            return $this->createResponse($content);

        } catch (\Exception $e) {
            $this->logger->errorLogCaller("Error rendering observation form", [
                'error' => $e->getMessage(),
                'formId' => $formId,
                'pid' => $pid,
                'encounter' => $encounter
            ]);

            return $this->createResponse(
                "<div class='alert alert-danger'>" . xlt("An error occurred loading the observation form") . "</div>",
                Response::HTTP_INTERNAL_SERVER_ERROR
            );
        }
    }

    /**
     * Handle observation list view using Twig template
     * AI Generated: New method to render list view from observation_list_screen.html design
     *
     * @param Request $request
     * @return Response
     */
    public function listAction(Request $request): Response
    {
        $pid = $_SESSION['pid'] ?? 0;
        $encounter = $_SESSION['encounter'] ?? 0;

        try {
            // Get search criteria from request
            $searchCriteria = [
                'search_term' => $request->query->get('search', ''),
                'ob_type' => $request->query->get('type', ''),
                'date_range' => $request->query->get('date_range', 'all'),
                'form_id' => $request->query->get('id', null)
            ];

            // Get observations with filtering
            $observations = $this->observationService->searchObservations($pid, $encounter, $searchCriteria);
            foreach ($observations as &$observation) {
                $observation['subObservations'] = $this->observationService->getSubObservations($observation['id']);
            }

            // Get encounter information for header
            $encounterInfo = $this->observationService->getEncounterInfo($pid, $encounter);

            // Get statistics
            $stats = $this->observationService->getObservationStats($pid, $encounter);

            // Prepare template data
            $templateData = [
                'observations' => $observations,
                'patientName' => $encounterInfo['patient_name'],
                'encounterDate' => $encounterInfo['encounter_date'],
                'providerName' => $encounterInfo['provider_name'],
                'searchCriteria' => $searchCriteria,
                'stats' => $stats,
                'title' => xl('Observation List'),
                'formId' => $request->query->get('id', null)
            ];

            // Add helper function for sub-observations
            $templateData['getSubObservations'] = function($observationId) {
                return $this->observationService->getSubObservations($observationId);
            };

            // Render the Twig template
            $content = $this->twig->render($this->getTemplatePath('observation_list.html.twig'), $templateData);

            return $this->createResponse($content);

        } catch (\Exception $e) {
            $this->logger->errorLogCaller("Error rendering observation list", [
                'error' => $e->getMessage(),
                'pid' => $pid,
                'encounter' => $encounter
            ]);

            return $this->createResponse(
                "<div class='alert alert-danger'>" . xlt("An error occurred loading the observation list") . "</div>",
                Response::HTTP_INTERNAL_SERVER_ERROR
            );
        }
    }

    /**
     * Handle observation save with enhanced data structure
     * AI Generated: Enhanced to support Design 1 sub-observations and new schema
     *
     * @param Request $request
     * @return Response
     */
    public function save(Request $request): Response
    {
        if (!CsrfUtils::verifyCsrfToken($request->request->get('csrf_token_form'))) {
            return $this->createResponse(
                xlt("Authentication Error"),
                Response::HTTP_UNAUTHORIZED
            );
        }

        $formId = $request->query->getInt('id');
        $postData = $request->request->all();

        try {
            $newId = $this->processEnhancedFormSave($formId, $postData);
            return $this->createResponse($this->getFormJumpHtml(xl("Observation Saved Successfully")));

        } catch (\Exception $e) {
            $this->logger->errorLogCaller("Error saving observation", [
                'error' => $e->getMessage(),
                'formId' => $formId,
                'postData' => $postData
            ]);

            return $this->createResponse(
                xlt("An error occurred saving the observation"),
                Response::HTTP_INTERNAL_SERVER_ERROR
            );
        }
    }

    /**
     * Process enhanced form save with sub-observations support
     * AI Generated: Enhanced to handle Design 1 hierarchical structure
     *
     * @param int $formId
     * @param array $postData
     * @return int
     */
    private function processEnhancedFormSave(int $formId, array $postData): int
    {
        global $userauthorized;

        // Extract main observation data
        $mainObservationData = $this->extractMainObservationData($formId, $postData);

        // Validate main observation
        $validationErrors = $this->observationService->validateObservationData($mainObservationData);
        if (!empty($validationErrors)) {
            throw new \InvalidArgumentException("Validation failed: " . implode(", ", $validationErrors));
        }

        // Extract sub-observations data
        $subObservationsData = $this->extractSubObservationsData($postData);

        // Delete existing observations for this form
        if ($formId > 0) {
            $this->observationService->deleteObservationsByFormId(
                $formId,
                $_SESSION['pid'],
                $_SESSION['encounter']
            );
        }

        // Save main observation with sub-observations
        $newId = $this->observationService->saveObservationWithSubObservations(
            $mainObservationData,
            $subObservationsData
        );

        return $newId;
    }

    /**
     * Extract main observation data from form POST
     * AI Generated: Enhanced to handle new schema fields
     *
     * @param int $formId
     * @param array $postData
     * @return array
     */
    private function extractMainObservationData(int $formId, array $postData): array
    {
        return [
            'id' => $formId ?: $this->observationService->getNextFormId(),
            'pid' => $_SESSION['pid'],
            'encounter' => $_SESSION['encounter'],
            'user' => $_SESSION['authUser'],
            'groupname' => $_SESSION['authProvider'],
            'authorized' => $_SESSION['userauthorized'] ?? 0,
            'code' => $postData["code"][0] ?? '',
            'description' => $postData["description"][0] ?? '',
            'code_type' => $postData["code_type"][0] ?? '',
            'table_code' => $postData["table_code"][0] ?? '',
            'ob_type' => $postData["ob_type"][0] ?? '',
            'ob_value' => $postData["ob_value"][0] ?? '',
            'ob_unit' => $postData["ob_unit"][0] ?? '',
            'date' => $postData["code_date"][0] ?? date('Y-m-d H:i:s'),
            'date_end' => !empty($postData["code_date_end"][0]) ? $postData["code_date_end"][0] : null,
            'observation' => $postData["comments"][0] ?? '',
            'ob_reason_code' => $postData['reasonCode'][0] ?? '',
            'ob_reason_status' => $postData['reasonCodeStatus'][0] ?? '',
            'ob_reason_text' => $postData['reasonCodeText'][0] ?? '',
            'category' => $postData['category'][0] ?? null,
            'questionnaire_response_id' => !empty($postData['questionnaire_response_id'][0]) ? $postData['questionnaire_response_id'][0] : null,
            'parent_observation_id' => null // Main observation has no parent
        ];
    }

    /**
     * Extract sub-observations data from form POST
     * AI Generated: New method to handle Design 1 sub-observations
     *
     * @param array $postData
     * @return array
     */
    private function extractSubObservationsData(array $postData): array
    {
        $subObservations = [];

        // Check if sub-observation data exists
        if (!empty($postData['sub_ob_value']) && is_array($postData['sub_ob_value'])) {
            foreach ($postData['sub_ob_value'] as $index => $value) {
                if (!empty($value) || !empty($postData['sub_description'][$index] ?? '')) {
                    $subObservations[] = [
                        'ob_value' => $value ?? '',
                        'ob_unit' => $postData['sub_ob_unit'][$index] ?? '',
                        'description' => $postData['sub_description'][$index] ?? '',
                        'code' => 'SUB-' . ($index + 1), // Auto-generate sub-observation codes
                        'code_type' => 'sub_observation',
                        'ob_type' => 'sub_observation',
                        'date' => $postData["code_date"][0] ?? date('Y-m-d H:i:s'),
                        'observation' => 'Sub-observation ' . ($index + 1)
                    ];
                }
            }
        }

        return $subObservations;
    }

    /**
     * Handle observation delete
     * AI Generated: Enhanced to handle sub-observations
     *
     * @param Request $request
     * @return Response
     */
    public function delete(Request $request): Response
    {
        $formId = $request->query->getInt('id');
        $pid = $request->query->getInt('pid', $_SESSION['pid'] ?? 0);
        $encounter = $request->query->getInt('encounter', $_SESSION['encounter'] ?? 0);

        try {
            if ($formId > 0) {
                $this->observationService->deleteObservationsByFormId($formId, $pid, $encounter);
            }

            // Redirect back to list view
            $listUrl = $GLOBALS['webroot'] . "/interface/forms/observation/observation_list.php?pid={$pid}&encounter={$encounter}";
            return $this->createResponse("<script>window.location.href = '{$listUrl}';</script>");

        } catch (\Exception $e) {
            $this->logger->errorLogCaller("Error deleting observation", [
                'error' => $e->getMessage(),
                'formId' => $formId
            ]);

            return $this->createResponse(
                xlt("An error occurred deleting the observation"),
                Response::HTTP_INTERNAL_SERVER_ERROR
            );
        }
    }

    /**
     * Handle observation report (unchanged from original)
     *
     * @param int $pid
     * @param int $encounter
     * @param int $cols
     * @param int|null $id
     * @return Response
     */
    public function report(int $pid, int $encounter, int $cols, ?int $id): Response
    {
        $content = $this->renderReport($pid, $encounter, $cols, $id);

        return $this->createResponse($content);
    }

    /**
     * Handle observation view (delegates to new)
     *
     * @param Request $request
     * @return Response
     */
    public function view(Request $request): Response
    {
        return $this->newAction($request);
    }

    /**
     * Create HTTP Response
     *
     * @param string $content
     * @param int $status
     * @return Response
     */
    private function createResponse(string $content, int $status = Response::HTTP_OK): Response
    {
        return new Response($content, $status, ['Content-Type' => 'text/html; charset=utf-8']);
    }

    /**
     * Generate form redirect HTML
     *
     * @param string $title
     * @return string
     */
    private function getFormJumpHtml(string $title): string
    {
        return $this->twig->render($this->getTemplatePath('observation_formjump.html.twig'), ['title' => $title]);
    }

    /**
     * Render observation report (unchanged from original)
     *
     * @param int $pid
     * @param int $encounter
     * @param mixed $cols
     * @param int|null $id
     * @return string
     */
    private function renderReport(int $pid, int $encounter, $cols, $id): string
    {
        if (!$id) {
            return "";
        }

        $observations = $this->observationService->getObservationsByFormId($id, $pid, $encounter);
        $formattedObs = array_map(fn($observation) => $this->observationService->formatObservationForDisplay($observation), $observations);
        return $this->twig->render($this->getTemplatePath("observation_report.html.twig"), ['observations' => $formattedObs]);
    }

    private function getTemplatePath(string $templateName): string
    {
        return '/forms/observation/templates/' . $templateName;
    }

    /**
     * Get ObservationService instance (for testing)
     *
     * @return ObservationService
     */
    public function getObservationService(): ObservationService
    {
        return $this->observationService;
    }

    /**
     * Get FormService instance (for testing)
     *
     * @return FormService
     */
    public function getFormService(): FormService
    {
        return $this->formService;
    }

    public function shouldShowListView(Request $request)
    {

        // if no id and no form_id provided we show the list view
        if ($request->query->getInt('id') <= 0
            && $request->query->getInt('form_id') <= 0) {
            // no id provided and no form_id provided
            // show new / edit view
            return false;
        } else if ($request->query->getInt('form_id') <= 0) {
            // if we only have an id(form_id) provided we show the list view as data exists for this form
            return true;
        } else {
            // we have either a form_id (new observation) or both id and form_id provided (edit observation)
            // show the edit view
            return false;
        }
    }
}
