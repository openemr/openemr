<?php

/*
 * ObservationController.php handles all web requests for the observation form in interface/forms/observation/
 *
 * @package openemr
 * @link      http://www.open-emr.org
 * @author    Jacob T Paul <jacob@zhservices.com>
 * @author    Vinish K <vinish@zhservices.com>
 * @author    Brady Miller <brady.g.miller@gmail.com>
 * @author    Claude.AI on August 21st 2025
 * @copyright Copyright (c) 2015 Z&H Consultancy Services Private Limited <sam@zhservices.com>
 * @copyright Copyright (c) 2017-2019 Brady Miller <brady.g.miller@gmail.com>
 * @copyright Public Domain for the pieces that were generated by Claude.AI (refactor from interface/forms/observation) view.php,new.php,save.php
 * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3
 */

namespace OpenEMR\Controllers\Interface\Forms\Observation;

use Nyholm\Psr7\Stream;
use OpenEMR\Common\Csrf\CsrfUtils;
use OpenEMR\Common\Forms\ReasonStatusCodes;
use OpenEMR\Common\Http\Psr17Factory;
use OpenEMR\Common\Logging\SystemLogger;
use OpenEMR\Core\Header;
use OpenEMR\Services\FormService;
use OpenEMR\Services\ObservationService;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

// AI Generated Note: This controller was refactored into a class using AI from interface/forms/observation/view.php,new.php,save.php to follow PSR-4 standards and improve maintainability.
class ObservationController
{
    private ObservationService $observationService;

    private FormService $formService;

    public function __construct(?ObservationService $observationService = null, ?FormService $formService = null)
    {
        $this->observationService = $observationService ?? new ObservationService();
        $this->formService = $formService ?? new FormService();
    }

    public function getObservationService(): ObservationService
    {
        return $this->observationService;
    }

    public function getFormService(): FormService
    {
        return $this->formService;
    }

    /**
     * Handle new/edit observation form display
     *
     * @param Request $request
     * @return Response
     */
    public function new(Request $request): Response
    {
        $formId = $request->query->getInt('id');
        $observations = [];

        if ($formId) {
            $observations = $this->observationService->getObservationsByFormId(
                $formId,
                $_SESSION["pid"],
                $_SESSION["encounter"]
            );
        }

        $reasonCodeStatii = ReasonStatusCodes::getCodesWithDescriptions();
        $reasonCodeStatii[ReasonStatusCodes::NONE]['description'] = xl("Select a status code");
        $obTypes = $this->observationService->getObservationTypes();

        ob_start();
        $this->renderNewForm($formId, $observations, $reasonCodeStatii, $obTypes);
        $content = ob_get_clean();
        return $this->createResponse($content);
    }

    /**
     * Handle observation form save
     *
     * @param Request $request
     * @return Response
     */
    public function save(Request $request): Response
    {
        global $encounter;

        $postData = $request->getPayload()->all();

        // CSRF verification
        if (!CsrfUtils::verifyCsrfToken($postData["csrf_token_form"])) {
            (new SystemLogger())->errorLogCaller("OpenEMR CSRF token authentication error on observation form save");
            return $this->createResponse("Authentication Error", Response::HTTP_UNAUTHORIZED);
        }

        if (!$encounter) {
            (new SystemLogger())->errorLogCaller("Internal error: we do not seem to be in an encounter on observation form save");
            return $this->createResponse(xlt("Internal error: we do not seem to be in an encounter!"), Response::HTTP_INTERNAL_SERVER_ERROR);
        }

        $formId = $request->query->getInt('id');
        $newId = $this->processFormSave($formId, $postData);
        return $this->createResponse($this->getFormJumpHtml("Redirecting...."));
    }

    private function getFormJumpHtml($title): string
    {
        ob_start();
        ?>
        <html>
        <head>
            <?php Header::setupHeader(); ?>
            <title><?php echo text($title); ?></title>
        </head>
        <body style="background: <?php echo attr_url($GLOBALS['backpic'])?>; margin: 10px;">
        <script>
        parent.closeTab(window.name, true);
        </script>
        </body>
        </html>
        <?php
        return ob_get_clean();
    }

    /**
     * @param int $pid
     * @param int $encounter
     * @param array $cols
     * @param int $id
     * @return Response
     */
    public function report(int $pid, int $encounter, int $cols, ?int $id): Response
    {

        ob_start();
        $this->renderReport($pid, $encounter, $cols, $id);
        $content = ob_get_clean();

        return $this->createResponse($content);
    }

    /**
     * Handle observation view (delegates to new)
     *
     * @param Request $request
     * @return Response
     */
    public function view(Request $request): Response
    {
        return $this->new($request);
    }

    /**
     * Process form save operation
     *
     * @param int $formId
     * @param array $postData
     * @return int
     */
    private function processFormSave(int $formId, array $postData): int
    {
        global $userauthorized;

        $code = $postData["code"] ?? [];
        $codeObs = $postData["comments"] ?? [];
        $codeDesc = $postData["description"] ?? [];
        $codeType = $postData["code_type"] ?? [];
        $tableCode = $postData["table_code"] ?? [];
        $obValue = $postData["ob_value"] ?? [];
        $obValuePhin = $postData["ob_value_phin"] ?? [];
        $obUnit = $postData["ob_unit"] ?? [];
        $codeDate = $postData["code_date"] ?? [];
        $reasonCode = $postData['reasonCode'] ?? [];
        $reasonStatusCode = $postData['reasonCodeStatus'] ?? [];
        $reasonCodeText = $postData['reasonCodeText'] ?? [];
        $obType = $postData["ob_type"] ?? [];
        $codeDateEnd = $postData["code_date_end"] ?? [];

        if ($formId !== 0) {
            $this->observationService->deleteObservationsByFormId(
                $formId,
                $_SESSION["pid"],
                $_SESSION["encounter"]
            );
            $newId = $formId;
        } else {
            $newId = $this->observationService->getNextFormId();
            $this->formService->addForm($_SESSION["encounter"], "Observation Form", $newId, "observation", $_SESSION["pid"], $userauthorized);
        }

        $codeDesc = array_filter($codeDesc);
        if (!empty($codeDesc)) {
            foreach ($codeDesc as $key => $codeval) {
                $obUnitValue = $this->observationService->processObservationUnit(
                    $code[$key] ?? '',
                    $obUnit,
                    $obValuePhin,
                    $key
                );

                $processedObValue = $this->observationService->processObservationValue(
                    $code[$key] ?? '',
                    $obValue,
                    $obValuePhin,
                    $key
                );

                $observationData = [
                    'id' => $newId,
                    'pid' => $_SESSION["pid"],
                    'groupname' => $_SESSION["authProvider"],
                    'user' => $_SESSION["authUser"],
                    'encounter' => $_SESSION["encounter"],
                    'authorized' => $userauthorized,
                    'observation' => $codeObs[$key] ?? '',
                    'code' => $code[$key] ?? '',
                    'code_type' => $codeType[$key] ?? '',
                    'description' => $codeDesc[$key] ?? '',
                    'table_code' => $tableCode[$key] ?? '',
                    'ob_type' => $obType[$key] ?? '',
                    'ob_value' => $processedObValue,
                    'ob_unit' => $obUnitValue,
                    'date' => $codeDate[$key] ?? '',
                    'ob_reason_code' => $reasonCode[$key] ?? '',
                    'ob_reason_status' => $reasonStatusCode[$key] ?? '',
                    'ob_reason_text' => $reasonCodeText[$key] ?? '',
                    'date_end' => $codeDateEnd[$key] ?: null
                ];

                $this->observationService->saveObservation($observationData);
            }
        }

        return $newId;
    }

    /**
     * Render the new/edit form
     *
     * @param int $formId
     * @param array $observations
     * @param array $reasonCodeStatii
     * @param array $obTypes
     * @return void
     */
    private function renderNewForm(int $formId, array $observations, array $reasonCodeStatii, array $obTypes): void
    {
        global $rootdir;
        ?>
        <html>
        <head>
            <title><?php echo xlt("Observation"); ?></title>
            <?php Header::setupHeader(['datetime-picker', 'reason-code-widget']); ?>
            <script src="<?php echo attr($GLOBALS['webroot']); ?>/interface/forms/observation/observation.js?v=<?php echo attr($GLOBALS['v_js_includes']); ?>" type="text/javascript"></script>
            <script>
                window.addEventListener('DOMContentLoaded', function () {
                    window.observationForm.init(<?php echo js_url($GLOBALS['webroot']); ?>, <?php echo js_url(collect_codetypes("problem", "csv")) ?>);
                });
                $(function () {
                    $(document).on('mouseover', '.datepicker', function () {
                        $(this).datetimepicker({
                            <?php $datetimepicker_timepicker = true; ?>
                            <?php $datetimepicker_showseconds = false; ?>
                            <?php $datetimepicker_formatInput = false; ?>
                            <?php require($GLOBALS['srcdir'] . '/js/xl/jquery-datetimepicker-2-5-4.js.php'); ?>
                        });
                    });
                });
            </script>
        </head>
        <body>
        <div class="container-xl mt-3">
            <div class="row">
                <div class="col-12">
                    <h2><?php echo xlt('Observation'); ?></h2>
                    <form method='post' name='my_form' action='<?php echo $rootdir; ?>/forms/observation/save.php?id=<?php echo attr_url($formId); ?>'>
                        <input type="hidden" name="csrf_token_form" value="<?php echo attr(CsrfUtils::collectCsrfToken()); ?>" />
                        <fieldset>
                            <legend><?php echo xlt('Enter Details'); ?></legend>
                            <div class="container-xl">
                                <?php $this->renderObservationRows($observations, $obTypes, $reasonCodeStatii); ?>
                            </div>
                        </fieldset>
                        <div class="form-group clearfix">
                            <div class="col-sm-12 position-override">
                                <div class="btn-group" role="group">
                                    <button type="submit" onclick='top.restoreSession()' class="btn btn-primary btn-save"><?php echo xlt('Save'); ?></button>
                                    <button type="button" class="btn btn-secondary btn-cancel" onclick="top.restoreSession(); parent.closeTab(window.name, false);"><?php echo xlt('Cancel'); ?></button>
                                </div>
                                <input type="hidden" id="clickId" value="" />
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        </body>
        </html>
        <?php
    }

    /**
     * Render observation rows
     *
     * @param array $observations
     * @param array $obTypes
     * @param array $reasonCodeStatii
     * @return void
     */
    private function renderObservationRows(array $observations, array $obTypes, array $reasonCodeStatii): void
    {
        if (!empty($observations)) {
            foreach ($observations as $key => $obj) {
                $this->renderObservationRow($key, $obj, $obTypes, $reasonCodeStatii);
            }
        } else {
            $this->renderObservationRow(0, [], $obTypes, $reasonCodeStatii);
        }
    }

    /**
     * Render a single observation row
     *
     * @param int $key
     * @param array $obj
     * @param array $obTypes
     * @param array $reasonCodeStatii
     * @return void
     */
    private function renderObservationRow(int $key, array $obj, array $obTypes, array $reasonCodeStatii): void
    {
        $rowId = $key + 1;
        $displayKey = $key;
        ?>
        <div class="tb_row" id="tb_row_<?php echo attr($rowId); ?>">
            <div class="form-row">
                <?php $this->renderCodeField($rowId, $obj); ?>
                <?php $this->renderTypeField($rowId, $obj, $obTypes); ?>
                <?php $this->renderValueField($rowId, $obj); ?>
                <?php $this->renderUnitField($rowId, $obj); ?>
                <?php $this->renderDateField($rowId, $obj); ?>
                <?php $this->renderEndDateField($rowId, $obj); ?>
                <?php $this->renderCommentsField($rowId, $obj); ?>
                <?php $this->renderActionsField($displayKey); ?>
            </div>
            <?php $this->renderReasonRow($displayKey, $obj, $reasonCodeStatii); ?>
        </div>
        <?php
    }

    /**
     * Render code field
     */
    private function renderCodeField(int $rowId, array $obj): void
    {
        ?>
        <div class="forms col-md-2">
            <label for="code_<?php echo attr($rowId); ?>" class="h5"><?php echo xlt('Code'); ?>:</label>
            <input type="text" id="code_<?php echo attr($rowId); ?>" name="code[]" class="form-control code"
                   value="<?php echo attr($obj["code"] ?? ''); ?>"
                   onclick='sel_code(<?php echo attr_js($GLOBALS['webroot']); ?>, this.parentElement.parentElement.parentElement.id);' />
            <span id="displaytext_<?php echo attr($rowId); ?>" class="displaytext help-block"></span>
            <input type="hidden" id="description_<?php echo attr($rowId); ?>" name="description[]" class="description"
                   value="<?php echo attr($obj["description"] ?? ''); ?>" />
            <input type="hidden" id="code_type_<?php echo attr($rowId); ?>" name="code_type[]" class="code_type"
                   value="<?php echo attr($obj["code_type"] ?? ''); ?>" />
            <input type="hidden" id="table_code_<?php echo attr($rowId); ?>" name="table_code[]" class="table_code"
                   value="<?php echo attr($obj["table_code"] ?? ''); ?>" />
        </div>
        <?php
    }

    /**
     * Render type field
     */
    private function renderTypeField(int $rowId, array $obj, array $obTypes): void
    {
        ?>
        <div class="forms col-md-2">
            <label for="ob_type_<?php echo attr($rowId); ?>" class="h5"><?php echo xlt('Type'); ?>:</label>
            <select name="ob_type[]" id="ob_type_<?php echo attr($rowId); ?>" class="ob_type form-control">
                <option value=""><?php echo xlt('Select Type'); ?></option>
                <?php foreach ($obTypes as $type) {
                    $selected = ($obj["ob_type"] ?? '') == $type['option_id'] ? 'selected' : '';
                    ?>
                    <option <?php echo attr($selected); ?> value="<?php echo attr($type['option_id']); ?>">
                        <?php echo text($type['title']); ?>
                    </option>
                <?php } ?>
            </select>
        </div>
        <?php
    }

    /**
     * Render value field
     */
    private function renderValueField(int $rowId, array $obj): void
    {
        $code = $obj["code"] ?? '';
        $style = $this->getValueFieldStyle($code);
        ?>
        <div class="forms col-md-1">
            <label id="ob_value_head_<?php echo attr($rowId); ?>" class="ob_value_head h5"><?php echo xlt('Value'); ?>:</label>
            <input type="text" name="ob_value[]" id="ob_value_<?php echo attr($rowId); ?>"
                   style="<?php echo $style; ?>" class="ob_value form-control"
                   value="<?php echo attr($obj["ob_value"] ?? ''); ?>" />
            <select name="ob_value_phin[]" id="ob_value_phin_<?php echo attr($rowId); ?>" class="ob_value_phin"
                <?php echo ($code != 'SS003') ? 'style="display: none;"' : ''; ?>>
                <option value="261QE0002X" <?php echo ($code == 'SS003' && ($obj["ob_value"] ?? '') == '261QE0002X') ? 'selected="selected"' : ''; ?>>
                    <?php echo xlt('Emergency Care'); ?>
                </option>
                <option value="261QM2500X" <?php echo ($code == 'SS003' && ($obj["ob_value"] ?? '') == '261QM2500X') ? 'selected="selected"' : ''; ?>>
                    <?php echo xlt('Medical Specialty'); ?>
                </option>
                <option value="261QP2300X" <?php echo ($code == 'SS003' && ($obj["ob_value"] ?? '') == '261QP2300X') ? 'selected="selected"' : ''; ?>>
                    <?php echo xlt('Primary Care'); ?>
                </option>
                <option value="261QU0200X" <?php echo ($code == 'SS003' && ($obj["ob_value"] ?? '') == '261QU0200X') ? 'selected="selected"' : ''; ?>>
                    <?php echo xlt('Urgent Care'); ?>
                </option>
            </select>
        </div>
        <?php
    }

    /**
     * Get style for value field based on code
     */
    private function getValueFieldStyle(string $code): string
    {
        if ($code == 'SS003') {
            return 'display: none;';
        }
        return 'display: block;';
    }

    /**
     * Render unit field
     */
    private function renderUnitField(int $rowId, array $obj): void
    {
        $code = $obj["code"] ?? '';
        $style = $this->getUnitFieldStyle($code);
        ?>
        <div class="forms col-md-1">
            <label id="ob_unit_head_<?php echo attr($rowId); ?>" class="ob_unit_head h5" style="<?php echo $style; ?>">
                <?php echo xlt('Units'); ?>:
            </label>
            <?php if ($code == '21612-7') { ?>
                <select name="ob_unit[]" id="ob_unit_<?php echo attr($rowId); ?>" class="ob_unit">
                    <option value="d" <?php echo (($obj["ob_unit"] ?? '') == 'd') ? 'selected="selected"' : ''; ?>>
                        <?php echo xlt('Day'); ?>
                    </option>
                    <option value="mo" <?php echo (($obj["ob_unit"] ?? '') == 'mo') ? 'selected="selected"' : ''; ?>>
                        <?php echo xlt('Month'); ?>
                    </option>
                    <option value="UNK" <?php echo (($obj["ob_unit"] ?? '') == 'UNK') ? 'selected="selected"' : ''; ?>>
                        <?php echo xlt('Unknown'); ?>
                    </option>
                    <option value="wk" <?php echo (($obj["ob_unit"] ?? '') == 'wk') ? 'selected="selected"' : ''; ?>>
                        <?php echo xlt('Week'); ?>
                    </option>
                    <option value="a" <?php echo (($obj["ob_unit"] ?? '') == 'a') ? 'selected="selected"' : ''; ?>>
                        <?php echo xlt('Year'); ?>
                    </option>
                </select>
            <?php } else { ?>
                <input type="text" name="ob_unit[]" id="ob_unit_<?php echo attr($rowId); ?>"
                       class="ob_unit form-control" style="<?php echo $style; ?>"
                       value="<?php echo attr($obj["ob_unit"] ?? ''); ?>" />
            <?php } ?>
        </div>
        <?php
    }

    /**
     * Get style for unit field based on code
     */
    private function getUnitFieldStyle(string $code): string
    {
        if ($code == 'SS003' || $code == '8661-1') {
            return 'display: none;';
        }
        return 'display: block;';
    }

    /**
     * Render date field
     */
    private function renderDateField(int $rowId, array $obj): void
    {
        ?>
        <div class="forms col-md-2">
            <label for="code_date_<?php echo attr($rowId); ?>" class="h5"><?php echo xlt('Date'); ?>:</label>
            <input type='text' id="code_date_<?php echo attr($rowId); ?>" name='code_date[]'
                   class="form-control code_date datepicker" value='<?php echo attr($obj["date"] ?? ''); ?>'
                   title='<?php echo xla('yyyy-mm-dd HH:MM Date of service'); ?>' />
        </div>
        <?php
    }

    /**
     * Render end date field
     */
    private function renderEndDateField(int $rowId, array $obj): void
    {
        ?>
        <div class="forms col-md-2">
            <label for="code_date_end_<?php echo attr($rowId); ?>" class="h5"><?php echo xlt('End Date'); ?>:</label>
            <input type='text' id="code_date_end_<?php echo attr($rowId); ?>" name='code_date_end[]'
                   class="form-control code_date datepicker" value='<?php echo attr($obj["date_end"] ?? ''); ?>'
                   title='<?php echo xla('yyyy-mm-dd HH:MM End Date of service'); ?>' />
        </div>
        <?php
    }

    /**
     * Render comments field
     */
    private function renderCommentsField(int $rowId, array $obj): void
    {
        ?>
        <div class="forms col-md-2">
            <label for="comments_<?php echo attr($rowId); ?>" class="h5"><?php echo xlt('Comments'); ?>:</label>
            <textarea name="comments[]" id="comments_<?php echo attr($rowId); ?>" class="form-control comments" rows="3"><?php echo text($obj["observation"] ?? ''); ?></textarea>
        </div>
        <?php
    }

    /**
     * Render actions field
     */
    private function renderActionsField(int $key): void
    {
        ?>
        <div class="forms col-md-2">
            <button type="button" class="btn btn-primary btn-sm btn-add"
                    onclick="duplicateRow(this.parentElement.parentElement.parentElement);"
                    title='<?php echo xla('Click here to duplicate the row'); ?>'>
                <?php echo xlt('Add'); ?>
            </button>
            <button type="button" class="btn btn-danger btn-sm btn-delete" onclick="
                el=this.parentElement.parentElement.parentElement;
                deleteRow(event, el.id, el.parentElement.getElementsByClassName('tb_row').length);">
                <?php echo xlt('Delete'); ?>
            </button>
            <button class="btn btn-secondary reason-code-btn mt-2"
                    title='<?php echo xla('Click here to provide an explanation for the observation value (or lack of value)'); ?>'
                    data-toggle-container="reason_code_<?php echo attr($key); ?>"><i class="fa fa-asterisk"></i>
                <?php echo xlt("Add Reason"); ?></button>
        </div>
        <?php
    }

    /**
     * Render reason row
     */
    private function renderReasonRow(int $key, array $obj, array $reasonCodeStatii): void
    {
        ?>
        <div class="form-row reasonCodeContainer reason_code <?php echo !empty($obj['ob_reason_code']) ? "" : "d-none"; ?>" id="reason_code_<?php echo attr($key); ?>">
            <div class="card mt-2 mb-4">
                <div class="card-header">
                    <?php echo xlt("Observation Reason Information"); ?>
                </div>
                <div class="card-body">
                    <div class="row">
                        <p class="col">
                            <?php echo xlt("When recording a reason for the value (or absence of a value) of an observation both the reason code and status of the reason are required"); ?>
                        </p>
                    </div>
                    <div class="row">
                        <div class="col-md-6 form-group">
                            <label><?php echo xlt("Reason Code"); ?></label>
                            <input class="code-selector-popup form-control"
                                   name="reasonCode[]" type="text" value="<?php echo attr($obj['ob_reason_code'] ?? ""); ?>"
                                   placeholder="<?php echo xlt("Select a reason code"); ?>"
                            />
                            <p class="code-selector-text-display <?php echo empty($obj['ob_reason_text']) ? "d-none" : ''; ?>">
                                <?php echo text($obj['ob_reason_text'] ?? ""); ?>
                            </p>
                            <input type="hidden" name="reasonCodeText[]" class="code-selector-text"
                                   value="<?php echo attr($obj['ob_reason_text'] ?? ""); ?>" />
                        </div>
                        <div class="col-md-6 form-group">
                            <label><?php echo xlt("Reason Status"); ?></label>
                            <select name="reasonCodeStatus[]" class="form-control">
                                <?php foreach ($reasonCodeStatii as $code => $codeDesc) : ?>
                                    <option value="<?php echo attr($code); ?>"
                                        <?php if (($obj['ob_reason_status'] ?? "") == $code) {
                                            echo "selected";
                                        } ?> >
                                        <?php echo text($codeDesc['description']); ?>
                                    </option>
                                <?php endforeach; ?>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <?php
    }

    /**
     * Render observation report
     *
     * @param int $pid
     * @param int $encounter
     * @param mixed $cols
     * @param int|null $id
     * @return void
     */
    private function renderReport(int $pid, int $encounter, $cols, $id): void
    {
        if (!$id) {
            return;
        }

        $observations = $this->observationService->getObservationsByFormId($id, $pid, $encounter);

        if (!empty($observations)) {
            echo "<table style='border-collapse:collapse;border-spacing:0;width: 100%;'>
                <tr>
                    <td align='center' style='border:1px solid #ccc;padding:4px;'><span class=bold>" . xlt('Code') . "</span></td>
                    <td align='center' style='border:1px solid #ccc;padding:4px;'><span class=bold>" . xlt('Description') . "</span></td>
                    <td align='center' style='border:1px solid #ccc;padding:4px;'><span class=bold>" . xlt('Code Type') . "</span></td>
                    <td align='center' style='border:1px solid #ccc;padding:4px;'><span class=bold>" . xlt('Table Code') . "</span></td>
                    <td align='center' style='border:1px solid #ccc;padding:4px;'><span class=bold>" . xlt('Value') . "</span></td>
                    <td align='center' style='border:1px solid #ccc;padding:4px;'><span class=bold>" . xlt('Unit') . "</span></td>
                    <td align='center' style='border:1px solid #ccc;padding:4px;'><span class=bold>" . xlt('Date') . "</span></td>
                </tr>";

            foreach ($observations as $observation) {
                $formattedObs = $this->observationService->formatObservationForDisplay($observation);

                echo "<tr>
                            <td style='border:1px solid #ccc;padding:4px;'><span class=text>" . text($formattedObs['code']) . "</span></td>
                            <td style='border:1px solid #ccc;padding:4px;'><span class=text>" . text($formattedObs['description']) . "</span></td>
                            <td style='border:1px solid #ccc;padding:4px;'><span class=text>" . text($formattedObs['code_type']) . "</span></td>
                            <td style='border:1px solid #ccc;padding:4px;'><span class=text>" . text($formattedObs['table_code']) . "</span></td>
                            <td style='border:1px solid #ccc;padding:4px;'><span class=text>" . text($formattedObs['ob_value']) . "</span></td>
                            <td style='border:1px solid #ccc;padding:4px;'><span class=text>" . text($formattedObs['ob_unit']) . "</span></td>
                            <td style='border:1px solid #ccc;padding:4px;'><span class=text>" . text($formattedObs['date']) . "</span></td>
                        </tr>\n";
            }

            echo "</table>";
        }
    }

    /**
     * Create a PSR-7 response with HTML content
     *
     * @param string $content
     * @return Response
     */
    private function createResponse(string $content, int $statusCode = Response::HTTP_OK): Response
    {
        return new Response($content, $statusCode, ['Content-Type' => 'text/html; charset=utf-8']);
    }
}
